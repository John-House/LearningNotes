配置文件
===============================================
1) Nginx的配置文件分为"主配置文件"和"辅助配置文件"；
2) Nginx的配置格式为:
		配置指令 指令参数1 指令参数2 ...
	或者
		配置指令 {
			... ;
			配置指令 {
				... ;
			}
		}
3) Nginx的命令行
	nginx -h 				--> 显示帮助信息
	nginx -c confPath		--> 使用confPath路径下的配置文件启动Nginx
	nginx -s reload			--> 载入新配置文件,开启使用新配置文件的worker进程,并友好关闭使用旧配置文件的worker进程
		  -s quit 			--> 友好关闭Nginx
		  -s stop 			--> 快速关闭Nginx
		  -s reopen 		--> 重新打开log文件
	nginx -g "directives"	--> 在命令行声明一条或多条指令及其参数
	nginx -t 				--> 检验Nginx的配置文件是否有错误
	nginx -T 				--> 检验Nginx的配置文件是否有错误,并备份至'标准输出'
	nginx -v 				--> 显示Nginx的版本信息
	nginx -V 				--> 显示Nginx的版本信息、编译器版本和编译参数
4) Nginx的配置指令
	----------------------------------------
	# Configure file										##  允许在任何级别的指令中嵌入其他(配置)文件
	include  path;											//  允许使用通配符表示path(若path是'相对路径',则相对于当前文件)
																注意: Nginx从上至下读取配置信息,因此对于同一配置指令,后面的指令值会覆盖前面的

	----------------------------------------
	# BuiltIn variable										##  Nginx的内置变量
	$remote_addr 											//  客户端的IP地址
	$binary_remote_addr										//  客户端的IP地址(4字节的二进制字节对象)
	$remote_port 											//  客户端的端口号

	$request 												//  客户端请求的请求行
	$scheme													//  客户端请求的协议(Http或HTTPS)
	$request_method											//  客户端请求的HTTP方法
	$request_uri											//  客户端请求的较完整URI(除'协议'和'域名'外的所有部分)
	$uri / $document_uri									//  客户端请求的标准化URI(仅包括'文件路径')
	$args / $query_string									//  客户端请求的所有参数值
	$arg_name												//  客户端请求的name参数的值
	$request_filename										//  客户端请求的文件路径(含ROOT指令的完整值)
	$host 													//  客户端请求的Host请求头的值(如果有的话),否则为$server_name
	$content_type 											//  客户端请求的Content-Type请求头的值
	$content_length 										//  客户端请求的Content-Length请求头的值

	$protocol												//  与客户端连接所使用的协议(TCP或UDP)
	$HTTPS													//  若客户端请求通过SSL连接,则值为on；否则为''(即空字符串)
	$is_args												//  若客户端请求的URI中带有参数,则为'?'；否则为''(即空字符串)
	$request_completion										//  若请求完成,值为OK；否则为空字符串
	$cookie_name											//  Cookie中的name属性的值	

	$status 												//  返回给客户端的响应的状态码
	$bytes_sent												//  返回给客户端的响应的总字节数
	$body_bytes_sent										//  返回给客户端的响应的响应体总字节数

	$hostname 												//  Nginx的主机名
	$pid 													//  Nginx的worker进程ID
	$connection_active										//  Nginx中当前活跃的客户端连接总数(包括'等待处理'的客户端)
	$connection_reading										//  Nginx中当前正在被读取请求头的客户端连接总数
	$connection_writing										//  Nginx中当前正在将响应写回客户端的客户端连接总数
	$connection_waiting										//  Nginx中当前正在等待请求到来的客户端连接总数
	$connection												//  当前连接的序列号
	$connection_requests 									//  当前连接的当前请求总数
	
	$document_root											//  (处理请求的)虚拟主机的ROOT指令的值
	$server_addr 											//  (处理请求的)虚拟主机的IP地址
	$server_port											//  (处理请求的)虚拟主机的端口号
	$server_name  											//  (处理请求的)虚拟主机的SERVER_NAME指令的值
	
	----------------------------------------
	# Main													##  配置全局指令(用户和用户组、worker进程、主进程ID、守护进程、错误日志、环境变量)
	user  username;											//  指定worker进程所属的用户(若没有,可以声明为nobody)
	group  groupname;										//  指定worker进程所属的用户组(若省略该指令，则默认为USER指令所属的用户组)
	worker_processes  cnts;									//  指定worker进程的个数(通常为CPU的核心数)
	worker_priority  cnts;									//  指定worker进程被操作系统调度的优先级(值的范围为-20~20,值越小,被调度的优先级越高)
	worker_rlimit_nofile  cnts;								//  指定每个worker进程可以打开的内核文件的总数(例如: 100000;)
																注意1: 该指令多用于避免产生"nginx: [warn] 1024 worker_connections exceed open file resource limit: 256"这样的警告信息)
	working_directory  absDirPath;							//  指定worker进程的当前工作目录,用于保存内核文件(多用于配置WORKER_RLIMIT_CORE指令)
	worker_rlimit_core  cnts;								//  指定每个worker进程可以打开的内核文件的总大小(例如: 50M;)
	
	pid	 absPath; 											//  指定保存主进程ID的文件路径
	
	daemon  on/off;											//  启用或禁止以'守护进程'形式运行(默认值为on)
	
	debug_points  abort/stop;								//  指定当内部错误发生时,是将错误信息写入一个内核文件(对应abort)还是停止进程(对应stop),
																以便使用系统调试工具进行深入分析
	error_log  absPath level;								//  配置'错误日志'(多用于'全局配置')
																	参数1(必须)用于指定保存'错误日志'的文件路径,
																	参数2(必须)用于指定'错误日志'的级别,从低到高依次为:
																		debug < info < notice < warn < error < crit < alert < emerg
	
	env  var=value;											//  新建或修改Nginx的环境变量

	# EVENTS									 			##  配置EVENT指令(事件处理机制、单进程最大连接数)
	events {										
		use  mechanism;       								//  指定事件处理机制(该指令的值可以是: epoll、poll、select、kqueue和/dev/poll等)
		worker_connections  cnts;			       			//  指定每个worker进程可以同时打开的最大连接数(包括但不限于'客户端连接'和'上游服务器连接')
		accept_mutex  on/off;								//  启用或禁止worker进程之间的互斥锁(默认值为on,若启用互斥锁,则worker进程之间会轮流接收连接,避免惊群现象)
																	惊群现象,是指(没有轮流接收时)一个客户端连接会唤醒所有worker进程去竞争互斥锁,但只有1个worker进程能够抢到,
																	对其他worker进程来说就白白被唤醒了(甚至当某个worker进程一直抢到时,其他worker进程每次都被白白唤醒),
																	因此这种操作会带来了很大的资源浪费和性能损耗
		multi_accept  on/off;								//  允许或禁止每个worker进程同一时间接收多个连接(默认值为off)
	}

	# HTTP													##  配置HTTP指令(基本设置、请求头和请求体的缓冲、响应的缓存、长连接、IP过滤、解/压缩)
	http {
		sendfile  on/off;									//  启用或禁止'sendfile系统调用'进行文件传输(默认为off,若开启则效率提升(零拷贝))
		types  mime-type suffix-name;						//  指定MIME类型对应的文件扩展名(Nginx内置了同等功能的mime.types文件,直接include它就OK)
		default_type  mime-type;							//  指定返回的响应的默认MIME类型(默认值为text/plain,当TYPES指令无效时,该指令生效)
		log_subrequest  on/off 								//  开启或禁止日志记录子请求的功能(默认值为off)
		log_not_found  on/off 								//  允许或禁止错误日志记录404错误
		log_format  format-name format-var [format-var...]	//  指定日志格式(仅用于'HTTP指令')
																注意: 若access_log日志的buffer参数声明了gzip,则无法自定义格式)
																'日志格式名称'可以自定义,但同一配置文件中不允许重复(默认值为combined),
																'日志格式变量'包括但不限于: 
																	$request_time			-> 请求的处理时间(毫秒级),
																							   从接收客户端请求的第1个字节,到客户端接收响应的最后1个字节
																	$time_iso8601			-> 本地时间('ISO8601'格式)
																	$time_local				-> 本地时间('月/日/年 时:分:秒'格式)

		client_header_buffer_size  cnts;					//  指定客户端请求的请求头缓冲大小(当请求头数据大于1kb时,该指令生效)
		large_client_header_buffers  cnts;					//  指定客户端请求的请求头缓冲的最大数量和大小(默认值为4 8k)
		client_body_buffer_size  cnts;						//  指定客户端请求的请求体缓冲大小(默认值为8k或16k),
																该指令多用于避免请求体数据以临时文件形式写入Nginx的主机磁盘
		client_max_body_size  cnts; 						//  指定客户端请求的请求头允许的最大值(默认值为1m,若超过则返回413错误)

		proxy_cache  z-name;								//  指定(缓存)共享空间的名字(默认值为off,可以配置多个)
		proxy_cache_path  absDirPath key_zone=...;			//  指定保存响应缓存的目录路径和共享空间的细节(可以配置多个)
																key_zone=z-name:size [level=x:y] [inactive=cnts] [max_size=cnts] [loader_files=cnts]
																	参数1(必须)用于指定(缓存)共享空间的名字和大小,
																	参数2(可选)用于指定保存缓存文件的子目录名的长度:1级子目录为x,2级子目录为y(之间用':'分隔),
																		假设响应对应的请求URI哈希后的结果为s(即一个字符串),则其缓存文件将保存为
																		'absDirPath/s[:x]/s[x:x+y+1]/s[x+y+z:]'
																	参数3(可选)用于指定不活跃的响应的最大缓存时间(在缓存超时方面,该值的优先级最高),
																	参数4(可选)用于指定缓存的最大容量(缓存整体超过该值后,会从近期最少使用的缓存开始清理),
																	参数5(可选)用于指定缓存文件的最大数量
		proxy_cache_key  string;							//  指定作为缓存key的字符串(通常由一系列变量构成)
		proxy_cache_min_users  cnts;						//  指定一个响应被缓存之前,其对应的请求至少需要发生多少次(默认值为1)
		proxy_cache_valid  [code1 code2 ...] time;			//  指定某些状态码对应的响应的最大缓存时间
																	参数1(可选)用于指定状态码,若省略则默认为200、301和302；若声明any,则表示所有的状态码,
																	参数2(必须)用于指定最大缓存时间
																注意:有多处指令涉及最大缓存时间,它们的优先级从高到低依次是:
																	inactive > 上游服务器的X-Accel-Expires响应头 > Expires响应头 = 
																	Cache-Control响应头 > max-age响应头 > PROXY_CACHE_VALID指令
																注意:若响应中存在'Cache-Control:private/no-cache/no-store响应头'或者'Set-Cookie响应头',
																	则无法使用缓存,为此你需要借助PROXY_IGNORE_HEADERS指令忽略该响应头；
																	但这样的话,你必须将Cookie值作为缓存Key的一部分(即将$cookie_user作为PROXY_CACHE_KEY指令的一部分)
		proxy_cache_bypass  string;							//  指定字符串(通常由一系列变量构成),当该字符串的值非0非空时,上游服务器会直接返回响应(而不是从缓存中尝试返回)
		proxy_cache_lock  on/off;							//  启用或禁止缓存锁(默认值为off)；若启用,则多个请求请求同一URI时,只有一个请求会被处理
		proxy_cache_lock_timeout  cnts;						//  指定多请求请求同一URI的超时时间
																多个请求要么等到该URI响应的缓存生成后读取缓存,要么等待cnts时间后全部被处理(但后者并不会生成缓存)
		proxy_cache_use_stale  error timeout invalid_header updating http_500 http_502 http_503 http_504	//
		
		tcp_nodelay  on/off;								//  启用或禁止tcp_nodelay(多在'长连接'时启用)
																若启用,则不借助Nagle算法,允许小数据包传输;若禁止,则借助Nagle算法,允许数据包累计到一定程度再传输
		tcp_nopush  on/off;									//  启用或禁止tcp_nopush
		keepalive_disable  client-type;						//  禁止与对应类型客户端之间的长连接(默认值为msie6 safari)
		keepalive_requests  cnts; 							//  指定长连接在关闭之前可接收的最大请求数
		keepalive_timeout  cnts header-value;				//  指定长连接的最长连接时间,以及返回的响应中Keep-Alive响应头的值
		
		# GEO 												##  配置GEO指令
		geoip_country  absPath;								//  指定GeoIP数据库的文件路径(IP地址与国家的关联)
																若IP地址存在,则以下变量会被赋予对应的值:
																	$geoip_country_code 		-> 2个字母的国家代码
																	$geoip_country_code3 		-> 3个字母的国家代码
																	$geoip_country_name 		-> 国家名称
		geoip_city  absPath;								//  指定GeoIP数据库的文件路径(IP地址与城市的关联)
																若IP地址存在,则以下变量会被赋予对应的值:
																	$geoip_city_country_code 	-> 2个字母的国家代码
																	$geoip_city_country_code3	-> 3个字母的国家代码
																	$geoip_city_country_name 	-> 国家名称
																	$geoip_city 				-> 国家城市名称
																	$geoip_postal_code 			-> 邮政编码
		geo [$key_var] $val_var {							//  指定'$key_var'变量的关联变量'$val_var'(前者默认为$remote_addr),
			default value;										因此,通常在LOCATION指令中借助IF指令(即判断$val_var变量的值)过滤来自某些IP地址的请求
			$key_var-value $val_var-value;
			... ;	
		}
		
		limit_conn_zone  $<var> zone=z-name:size			//  指定一片size大小、名为z-name的共享空间,用于储存$<var>键的状态
		limit_conn  z-name cnts;							//  指定z-name共享空间中每个键的最大连接数,
																若超过该数,则返回503错误,可以用于限制同一IP的大量连接
		
		limit_req_zone  $<var> zone=z-name:size rate=cnts;	//  指定一片size大小、名为z-name的共享空间,用于储存$<var>键的状态,
																并且限制来自$<var>键的请求速率为cnts(其单位为r/s(每秒钟)或r/m(每分钟))
		limit_req  zone=z-name brust=cnts [nodelay];		//  指定z-name共享空间中每个键的最大请求数为cnts(一次连接期间,允许有多次请求)
																	参数3(可选)用于指定请求之间无延迟,因为'限制请求速率'是通过在单位时间内每个请求之后加入延迟时间实现的
		
		limit_rate  cnts;  									//  指定客户端通过'单个连接'下载时,每秒的最大传输量(例如: limit_rate 50k)
		limit_rate_after  cnts;								//  指定客户端下载多少数据后开启LIMIT_RATE指令(例如: limit_rate_after 500k)
		
		gunzip  on/off;										//  当客户端不支持gzip时,启用解压.gzip文件的功能
		gunzip_buffers  cnts unit-size;						//  指定解压响应的缓冲数量和单位大小(默认为32 4k或16 8k)
		
		gzip  on/off;										//  启用或禁止压缩响应
		gzip_types  mime-type1 [mime-type2 ...];			//  指定压缩哪些MIME类型的响应(默认值为text/html)
		gzip_comp_level  cnts;								//  指定压缩级别(默认为1,可以是1~9,推荐值为4或5)
		gzip_buffers  cnts unit-size;						//  指定压缩响应的缓冲数量和单位大小(默认为32 4k或16 8k)
		gzip_min_length  cnts;								//  指定响应会被压缩的最小长度(响应的长度由Content-Legnth响应头决定)
		gzip_http_version  version;							//  指定Http版本(高于该版本的响应才会被压缩)
		gzip_proxied  off / ...;							//  指定对于'反向代理'请求,是否启用压缩(若声明off,则禁止压缩;若声明其他,则允许有多个有效值)
																	expired 			-> 若返回的响应不应该被缓存,则启用压缩(是否应该由Expires响应头决定)
																	no-cache			-> 若返回的响应中Cache-Control响应头为no-cache,则启用压缩,
																	no-store			-> 若返回的响应中Cache-Control响应头为no-store,则启用压缩,
																	private				-> 若返回的响应中Cache-Control响应头为private,则启用压缩,
																	no-etag				-> 若返回的响应中不包括ETag响应头,则启用压缩,
																	no_last_modified	-> 若返回的响应中不包括Last-Modified响应头,则启用压缩
																	auth 				-> 若'反向代理'的请求中包括认证请求头,则启用压缩,
																	any					-> 若'方向代理'的请求中包括任何Via请求头,则启用压缩,
		gzip_static  on/off;								//  启用或禁止预压缩响应文件(前提是Nginx安装了gzip_static模块)
		
		# SERVER											##  配置SERVER指令(基本配置、邮件代理、SSL协议、用户Cookie跟踪、IP过滤、上游服务器域名解析、Memcache上游服务器)
		server {
			set $<var> value;								//  指定'$<var>'变量的关联值为'value'
			access_log  absPath [format] [cache] [flush] 	//  配置'访问日志'(多用于'HTTP指令'和'SERVER指令')
																	参数1(必须)用于指定保存'访问日志'的文件路径(若为off,则表示禁用访问日志),
																	参数2(可选)用于指定'日志格式名称'(默认值为combined),
																	参数3(可选)用于指定'访问日志'的写入缓存大小(若为gzip=n,则表示日志缓存会被'n级压缩'),
																	参数4(可选)用于指定'访问日志'的最大缓存时间(例如: flush=1m)
			listen  [[IP:]port] [default_server] [ssl] [http2]	//  指定虚拟主机的监听事宜(可配置多个)
																	参数1(可省)用于指定虚拟主机监听的IP地址和端口号(默认值为*:80或*:8000),
														   			参数2(可选)用于指定当前虚拟主机是否为'默认虚拟主机',
																		对于同一监听地址和端口下的多个虚拟主机,默认将第1个设为对应监听地址和端口下的'默认虚拟主机',
														   			参数3(可选)用于指定当前虚拟主机是否'仅接收处理HTTPS请求'
														   			参数4(可选)用于指定当前虚拟主机是否'接收处理HTTP2请求'
			server_name  IP-DNS-Regex [IP-DNS-Regex...]		//  指定虚拟主机的名字及其备用名(默认值为"",也可以是IP字符串、(通配符*)域名和(正则~)域名)
																	例如:'127.0.0.1'
																		www.example.com 或 www.*.com
																		~^(\d+).example.[com]{3}$  		-> 后续引用通过'$组号'(例如:$1)的形式
																将客户端请求的Host请求头与该指令的值对比,从而确定哪个虚拟主机接收并处理客户端请求
																注意1: <server_name "">的虚拟主机专门用于接收并处理没有Host请求头的客户端请求
																	匹配对比会按照以下顺序进行(优先级从高到低):
																		v  LISTEN指令的端口值
																		v  SERVER_NAME指令的恰好值
																		v  SERVER_NAME指令的开头值
																		v  SERVER_NAME指令的结尾值
																		v  SERVER_NAME指令的正则值
																		v  默认值虚拟主机
			root  absPath;									//  指定在哪个目录中查找请求的文件(换言之,请求的是'ROOT指令的值/请求URI的文件路径'这个拼接路径下的文件)
			merge_slashes  on/off;							//  允许或禁止将请求URI中的多个连续'/'合并为一个(默认值为on)
			ignore_invalid_headers  on/off;					//  启用或禁止'忽略无效请求头'的功能(默认值为on)
			rewrite  regex newURI [flag];					//  将原URI重定向至重写后的newURI(多用于'SERVER指令'和'LOCATION指令')
																注意1: 若配置文件中出现多处REWRITE指令,则原URI按照执行顺序依次被重写
																注意2: 若原URI中包含'参数',则它们会被'隐式添加'到重写后的URI末尾；若不想这样,可以在重写后的URI末尾添加'?'字符
																	参数1(必须)用于指定正则表达式,以捕获所需的关键信息,
																		注意3: 若正则表达式中包含'}'或';'字符,则必须用''单引号或""双引号包裹住整个正则表达式,
																	参数2(必须)用于指定重写后的URI(可以额外添加'参数',也可以使用前面捕获的关键信息),
																		注意4: 若重写后的URI以表示'协议'的实际名或变量名开头,则worker进程停止后续处理,直接返回给客户端一个'临时重定向'的响应
																	参数3(可选),可以是:
																		last		-> 多用于'SERVER指令',即终止同级别中的REWRITE指令,但正常进行重写后的URI匹配
																		break		-> 多用于'LOCATION指令',即终止同级别中的REWRITE指令
																		redirect	-> 多用于newURI没有以表示'协议'的实际名或变量名开头,即返回给客户端一个'临时重定向'的响应(状态码302)
																		permanent	-> 返回给客户端一个'永久重定向'的响应(状态码301)
			
			# IF											##  IF指令
			if (condition) {								//  condition可以是:
				...  												$var							-> '$var'字符串非0非空为True
																	x = y 	 		x != y			-> 'x等于y为True'或者'x不等于y为True'
																	x ~ expr		x !~ expr		-> 'x重视大小写的匹配expr正则'或者'x重视大小写的不匹配expr正则'
																	x ~* expr		x !~* expr		-> 'x忽略大小写的匹配expr正则'或者'x忽略大小写的不匹配expr正则'
																	-f filePath		!-f filePath	-> 'filePath文件存在为True'或者'filePath文件不存在为True'
																	-d dirPath		!-d dirPath		-> 'dirPath目录存在为True'或者'dirPath目录不存在为True'
																	-e path			!-e path		-> 'path存在为True'或者'path不存在为True'
																	-x path			!-x path		-> 'path是可执行文件为True'或者'path不是可执行文件为True'
			}
			add_header  Header Value;						//  在状态码为200、204、206、301、302、303、304和307的响应中添加响应头
			charset  encoding;								//  指定响应的Content-Type响应头的'字符集'属性
			etag  on/off;									//  禁止或允许为静态资源自动生成ETag响应头(默认值为on)
			disable_symlinks  on/off/if_not_owner [from]	//  在返回客户端请求的文件之前,是否检查其路径中存在'符号链接':
																	off 			-> 不检查(默认值值)
																	on  			-> 若文件路径中的某部分是'符号链接',则答复客户端'拒绝访问'
																	if_not_owner	-> 若文件路径中的某部分是'符号链接',且'符号链接'和'对应的文件'
																					   不属于同一用户,则答复客户端'拒绝访问'
																	from=part-path 	-> 若文件路径中从partPath之后的部分是'符号链接',则按照on/if_not_owner处理
			error_page code1 [code2 ...] [=[code]] newURI;	//  当虚拟主机返回'code1 ...'中的任意状态码时,将请求重定向至newURI(通常为命名LOCATION指令)
																若额外声明=,则表示修改重定向后的状态码(可以显示指定为code,也可以自适应重定向后的状态码)
			server_tokens  on/off; 							//  指定返回错误时,是否将Nginx版本号和Server信息写入响应头中返回(默认值为on)
			
			proxy  on/off;									//  启用或禁止'邮件代理'
			protocol  mail-type;							//  指定邮件服务器支持的协议(默认值为imap,也可以是pop3或smtp)
			proxy_buffer  cnts;								//  指定'邮件代理'连接的缓冲大小(默认值为4k或8k)

			ssl  on/off;									//  启用或禁止HTTPS协议
			ssl_certificate  certPath;						//  指定SSL证书(.PEM格式)的所在路径
			ssl_certificate_key  keyPath;					//  指定SSL证书密钥的所在路径
			ssl_ciphers  password;							//  指定当前虚拟主机支持的密码(OpenSSL格式,默认值为HIGH:!aNULL:!MD5)
			ssl_client_certificate  certPath;				//  指定CA证书(.PEM格式)的所在路径(用于签名客户端证书)
			ssl_crl  crlPath;								//  指定证书撤销列表文件(.PEM格式)的所在路径(用于校验客户端证书)
			ssl_prefer_server_ciphers  on/off;				//  允许或禁止(使用SSLv3或TLS协议时)服务器密码优先于客户端密码
			ssl_protocols  ...;								//  指定启用哪些SSL协议(默认值为SSLv3,TLSv1,TLSv1.1,TLSv1.2)
			ssl_session_cache  argv;						//  指定SSL缓存的类型和大小
																	off					-> 告知客户端会话无需重用,
																	none				-> 告知客户端会话会被重用,但不是真实的,
																	builtin				-> 使用OpenSSL内置的缓存大小(仅作用于一个worker的会话)
																	shared:name:size	-> 告知所有worker共用同一缓存配置(name对应缓存名,size对应缓存大小(单位:MB))
			ssl_session_timeout  cnts;						//  指定客户端使用相同SSL参数的有效时间(默认值为5m,这些参数储存在缓存中)
			ssl_verify_client  on/off;						//  启用或禁止SSL客户端证书校验(默认值为off)
			ssl_verify_depth  cnts;							//  指定宣布客户端证书无效之前需要检查多少位的签名(默认值为1)

			userid  on/v1/log/off;							//  指定UserID模块的使用情况:
																	on 	-> 启用版本2的Cookies并记录它们,
																	v1	-> 启用版本1的Cookies并记录它们,
																	log	-> 不返回Cookies但记录请求的Cookies,
																	off	-> 不返回Cookies也不记录到日志
																注意1: UserID模块用于跟踪网站的访问者；当客户端发来请求时,使用$uid_set变量保存该请求的Cookie信息,使用$uid_got变量保存该客户端后续请求的Cookie信息
			userid_domain  domain;							//  指定Cookie中的域名
			userid_name  name;								//  指定Cookie中的名字(默认值为uid)
			userid_expires  time;							//  指定Cookie的有效期(例如: 365d;)
																若声明为max,则为31 Dec 2037 23:55:55 GMT
			userid_path  path;								//  指定Cookie的路径
			userid_service  string;							//  指定根据什么标识返回Cookie的那台虚拟主机(例如: 版本2下根据虚拟主机的IP地址；版本1下直接为0)
			
			allow  all/IP; 									//  允许哪些IP访问(可以设置多个,若声明all,则允许任何IP访问)
			deny  all/IP; 									//  拒绝哪些IP访问(可以设置多个,若声明all,则拒绝任何IP访问)
			auth_basic  domain-string;						//  拒绝来自某个域名(及其子域)的IP访问
			auth_basic_user_file  path;						//  指定保存认证文件的路径(该文件用于用户认证,其内容格式为username:password[:comment])
																若path为'相对路径',则相对于ROOT指令

			resolver  dnsServer [valid=cnts]				//  指定域名服务器的IP地址(当上游服务器以非IP地址形式出现时,该指令有所帮助)
																	参数2(可选)用于覆盖域名记录中的TTL
			resolver_timeout  cnts;							//  指定域名服务器解析的超时时间(默认为30s),为避免客户端等待时间过长,该指令的值应该尽可能的小

			memcached_buffer_size  cnts;					//  指定Memcached上游服务器返回的响应的缓冲大小(默认值为4k或8k)
																注意: Nginx会将Memcached上游服务器返回的响应同步发给客户端(即Nginx和客户端之间没有缓冲)
			memcached_connect_timeout  cnts;				//  指定Nginx转发请求给Memcached上游服务器后,等待其连接的最长时间(默认值为60s)
			memcached_next_upstream  opt [opt ...];			//  指定Nginx转发请求给下一个上游服务器的前提条件(可以指定一个或多个):
																	off 			-> 禁止Nginx转发请求给下一个上游服务器,
																	error 			-> 当Nginx与Memcached上游服务器的通信出现错误时,
																	timeout 		-> 当Nginx与Memcached上游服务器的通信超时时,
																	invalid_response-> 当Memcached上游服务器返回的响应为空或无效响应时,
																	not_found 		-> 当Memcached上游服务器未找到请求的内容时
			memcached_read_timeout  cnts;					//  指定Nginx在关闭连接之前从Memcached上游服务器两次成功'读操作'的耗时(默认值为60s)
			memcached_send_timeout  cnts;					//  指定Nginx在关闭连接之前从Memcached上游服务器两次成功'写操作'的耗时(默认值为60s)
							
			# LOCATION										##  配置LOCATION指令(多用于'URI匹配'和'内部重定向')
			location [MODE] cmpURI {						//  接收并处理URI匹配'[MODE] cmpURI'的请求
																注意1: 除'=修饰符LOCATIONS指令'和'命名LOCATION指令'外,其他LOCATION指令都可以嵌套LOCATION指令
																	MODE是指令修饰符(可选),可以是:
																		= 	-> 用cmpURI去'精确匹配'请求的URI,若匹配成功,则停止匹配(默认值)
																		^~ 	-> 用cmpURI去'匹配',若匹配成功(即为最佳匹配),则不再进行正则匹配
																		~ 	-> 用cmpURI去'重视大小写的正则匹配'请求的URI
																		~* 	-> 用cmpURI去'忽略大小写的正则匹配'请求的URI
																	cmpURI是匹配值(必须),客户端的请求在匹配之前会进行'百分号解码'(例如:'%20'会解码成空字符串后再进行匹配)
				
				internal;									//  指定LOCATIONS指令仅用于'内部重定向'
				alias  absDirPath;							//  指定在哪个目录中查找请求的文件(换言之,请求的是'ALIAS指令的值/请求URI的文件基本名'这个拼接路径下的文件)
				index  relPath [relPath] ...;				//  指定首页文件及备选首页文件(对于URI为'/'的请求,会返回首页文件)
				try_files  path1 [path2 ...] newURI  		//  按顺序依次检测每个文件是否存在；若都不存在,则将请求重定向至newURI(通常为命名LOCATION指令)
				return  [code] [text-string]/[URL]			//  停止处理并返回给客户端指定的内容
																	参数1(可选)用于指定返回的响应的状态码(默认值为302),
																	参数2(可选)用于指定返回的响应的'响应体'内容,
																		或者指定返回的响应的'Location响应头'内容(即告诉客户端重定向至URL)
				
				autoindex  on/off;							//  允许或禁止Nginx生成当前目录的文件列表(默认值为off)
				autoindex_exact_size  on/off;				//  允许或禁止Nginx生成文件列表时,额外指明文件大小的单位(默认值为on)
				autoindex_localtime  on/off;				//  指定Nginx生成文件列表时,文件修改时间采用'本地时间,对应on'还是'UTC时间,对应off'(默认值为off)

				flv;										//  启用flv模块(Nginx提供视频文件搜索并返回的功能,前提在请求URI的参数部分添加'start=...')
				mp4;										//  启用mp4模块(Nginx提供视频文件搜索并返回的功能,前提在请求URI的参数部分添加'start=...')
				mp4_buffer_size  cnts;						//  投递.mp4文件的初始缓冲大小
				mp4_max_buffer_size  cnts;					//  指定处理.mp4文件的最大缓冲大小

				expires  [modified] time;					//  新建或修改响应中的Expires和Cache-Control响应头(这两个响应头用于控制响应文件在客户端本地的最大缓存时间)
																Expires响应头		会被修改为'Expires: $<modified> + $<time>'
																Cache-Control响应头	会被修改为'Cache-Control: max-age=$<time>'
																	参数1(可选)用于指定'基准时间'(默认值为'当前时间'；若声明为'过去时间',则自动调整为'响应文件的修改时间'),
																	参数2(必须)用于指定'增量时间'(若声明为'负值',则等价于'Cache-Control: no-cache')
																注意1: 若该指令的值为epoch,则等价于'Expires: Thu, 01 Jan 1970 00:00:01 GMT'
																注意2: 若该指令的值为max,则等价于'Expires: Thu, 31 Dec 2037 23:55:55 GMT','Cache-Control: max-age=10年'
				add_before_body  fileURI;					//  在当前请求返回的响应体的开头添加子请求(即fileURI,仅含'文件路径'的URI)的响应结果
																注意1: Nginx必须安装了addition模块
				add_after_body  fileURI;					//  在当前请求返回的响应体的结尾添加子请求(即fileURI,仅含'文件路径'的URI)的响应结果
																注意1: Nginx必须安装了addition模块
				sub_filter  'old-string' 'new-string';		//  用'new-string'去替换返回的响应中'HTML文件中'的'old-string'(仅替换一次)
																注意1: Nginx必须安装了sub模块
				sub_filter_once  off;						//  声明该指令后,能替换多少次就替换多少次
																注意1: Nginx必须安装了sub模块
				sub_filter_types  mime-type;				//  指定sub模块适用于哪些mime类型的文件(若声明为*,则适用于所有文件)
																注意1: Nginx必须安装了sub模块
				ssi  on/off;								//  启用或禁止ssi模块(默认值为off)
																注意1: ssi模块是一种过滤器(即Server Side Includes),多用于逻辑处理响应文件的内容
																注意2: ssi模块的主要配置是在响应文件中插入'类注释代码',代码及其功能如下:
																	a)'类注释代码'的全局配置
																		<!--#config [errmsg="error_msg"]-->
																		注意2.1: errmsg参数(可选)用于指定ssl处理出现错误时显示的内容,
																				默认为"an error occurred while processing the directive")
																	b)嵌入文件内容/子请求的响应内容/预置代码块
																		<!--#inclue [file="relPath"] [virtual="fileURI" [set="var_name"]] [stub="block_name"]-->
																		注意2.2: file参数(可选)用于指定嵌入的文件路径(相对于ROOT指令),
																		注意2.3: virtual参数(可选)用于指定嵌入的(仅含文件路径的)子请求,
																				set参数(可选)用于将子请求的响应内容赋值给var_name变量,
																		注意2.4: stub参数(可选)用于指定嵌入的预置代码块名
																	c)定义预置代码块
																		<!--#block name="block_name"-->
																		HTML代码
																		<!--#endblock-->
																	d)定义变量
																		<!--#set var="var_name" value="var_value"-->
																	e)输出变量
																		<!--#echo var="var_name" [default="if_not_defined"] [encoding=none/"coding_url"]-->
																		注意2.5: default参数(可选)用于指定变量不存在时输出的内容,默认值为none
																		注意2.6: encoding参数(可选)用于指定变量的编码方式,默认值为"entity"
				ssi_silent_errors  on/off;					//  当ssi处理出现错误时,启用或禁止忽略错误(默认值为off)
				ssi_types  mime-type;						//  指定ssi模块适用于哪些mime类型的文件(若声明为*,则适用于所有文件)
				image_filter  handle;						//  处理请求的图像后返回(由handle参数决定如何处理):
																	off				-> 禁止图像处理,
																	test 			-> 检查返回的图像格式；若不是JPEG、GIF或PNG,则返回415错误,
																	size			-> 以JSON形式返回图像的信息而非图像(
																					   例如: {"img":{"width":150, "height":200, "type":"png"}}
																	rotate degree 	-> 将图像'逆时针'旋转90、180或270度(若与其他操作组合,该指令的优先级最高)
																	resize w h 		-> 按比例改变图像(若长或宽不变,则为-),通常将请求URI中的参数赋值给中间变量来指定w和h
																	crop w h 		-> 按尺寸裁剪图像(若长或宽不变,则为-),通常将请求URI中的参数赋值给中间变量来指定w和h
																注意1: 必须安装了libgd库,Nginx必须安装了image_filter模块(--with-http_image_filter_module)
				image_filter_buffer							//  指定图像处理所使用的缓冲大小(默认值为1M,若超过,则返回415错误)
				image_filter_sharpen  cnts;					//  指定图像处理后的清晰度(默认值为0)
				image_filter_jpeg_quality  cnts;			//  指定JPEG图像处理后的品质(默认值为75,建议小于95)
				image_filter_transparency  on/off;			//  允许或禁止GIF和PNG图像保留透明度(默认值为on)
				
				rewrite  regex newURI [flag];				//  将原URI重定向至重写后的newURI(多用于'SERVER指令'和'LOCATION指令')
																注意1: 若配置文件中出现多处REWRITE指令,则原URI按照执行顺序依次被重写
																注意2: 若原URI中包含'参数',则它们会被'隐式添加'到重写后的URI末尾；若不想这样,可以在重写后的URI末尾添加'?'字符
																	参数1(必须)用于指定正则表达式,以捕获所需的关键信息,
																		注意3: 若正则表达式中包含'}'或';'字符,则必须用''单引号或""双引号包裹住整个正则表达式,
																	参数2(必须)用于指定重写后的URI(可以额外添加'参数',也可以使用前面捕获的关键信息),
																		注意4: 若重写后的URI以表示'协议'的实际名或变量名开头,则worker进程停止后续处理,直接返回给客户端一个'临时重定向'的响应
																	参数3(可选),可以是:
																		last		-> 多用于'SERVER指令',即终止同级别中的REWRITE指令,但正常进行重写后的URI匹配
																		break		-> 多用于'LOCATION指令',即终止同级别中的REWRITE指令
																		redirect	-> 多用于newURI没有以表示'协议'的实际名或变量名开头,即返回给客户端一个'临时重定向'的响应(状态码302)
																		permanent	-> 返回给客户端一个'永久重定向'的响应(状态码301)

				proxy_pass  http://<upserver-name>;			//  通常搭配UPSTREAM指令使用(多用于'反向代理',将客户端的请求转发给Http上游服务器)
																将客户端请求的URI替换为newURI后转发给Http上游服务器(例如: proxy_pass http://<upserver-name>;)
															   		注意1: 若LOCATIONS指令中的URI使用了'正则',则替换无效(即转发客户端的原请求)
															   		注意2: 若LOCATIONS指令中使用了REWRITE指令,则替换无效(即将重写后的URI转发给上游服务器)
				<upserver-type>_pass  <upserver-name> 		//  通常搭配UPSTREAM指令使用(多用于'反向代理',将客户端的请求转发给<upserver-type>上游服务器)
																将客户端请求直接转发给<upserver-name>中的上游服务器(例如: memcached_pass memcaches;)
																	注意1: 反向代理至memecached上游服务器,多用于查找已缓存的请求并返回其响应
				
				proxy_connect_timeout  cnts;				//  指定Nginx从接收客户端请求到连上上游服务器的最大等待时间
				proxy_buffering  on/off;					//  允许或禁止在接收响应时使用缓冲(默认值为on)
																若为off,则Nginx接收到上游服务器返回的响应后,会立即将其返回给客户端
				
				proxy_set_header  Header Value				//  新建或修改转发给上游服务器的请求中的请求头,例如:
																	proxy_set_header X-Real-IP $remote_addr; 
																		-> 在转发给上游服务器的请求头中声明'客户端的IP地址'
																	proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; 
																		-> 在转发给上游服务器的请求头中声明'客户端的IP地址'
				proxy_set_body								//  新建或修改转发给上游服务器的请求中的请求体
				
				proxy_ignore_headers 						//  指定上游服务器返回的响应中被忽略的响应头
				proxy_headers_hash_max_size					//  指定上游服务器返回的响应中的响应头的最大大小
				proxy_cookie_domain							//  修改上游服务器返回的响应中的Set-Cookie响应头的domain参数
				proxy_cookie_path							//  修改上游服务器返回的响应中的Set-Cookie响应头的path参数
				proxy_redirect  on/off;						//  允许或禁止重写上游服务器返回的响应中的Location和Refresh响应头
				proxy_read_timeout  cnts;					//  指定Nginx在关闭连接之前,从上游服务器成功执行2次'读操作'的耗时
				proxy_send_timeout  cnts;					//  指定Nginx在关闭连接之前,从上游服务器成功执行2次'写操作'的耗时
				proxy_buffers  cnts unit-size;				//  指定上游服务器返回的响应的缓冲数量和单位大小(默认值为8 4k或8 8k)
				proxy_buffer_size  cnts;					//  指定上游服务器返回的响应(首批数据)的缓冲大小(默认值为4k或8k,首批数据中必然包括响应头信息)
				proxy_temp_path								//  指定上游服务器返回的响应的缓冲文件路径

				proxy_hide_header  							//  指定Nginx返回给客户端的响应中被忽略的响应头
				proxy_pass_header  							//  指定Nginx返回给客户端的响应中存在的响应头(会覆盖proxy_hide_header的设置)
				proxy_busy_buffers_size  cnts;				//  指定Nginx返回给客户端的响应的缓冲大小(默认值为8k或16k)
				proxy_http_version  version;				//  指定与上游服务器通信时使用的HTTP协议版本(若保持长连接,则使用1.1)
			}

			location @<loc-name> {							//  配置命名LOCATION指令(仅限于SERVER指令中,多用于'内部重定向')
				... ;										
			}
		}

		# UPSTERAM									 		##  配置'反向代理'(默认采用'负载均衡-轮循算法',即round-robin)
		upstream <upserver-name> {							//  指定上游服务器为<upserver-name>
			keepalive  cnts; 								//  指定每个worker进程缓存的(与上游服务器之间的)连接数
																为保持长连接,应将转发给上游服务器的请求中的Connection请求头修改为""
			ip_hash;										//  启用'负载均衡-哈希算法'
			least_conn;										//  启用'负载均衡-最少连接算法'
			server  upserver-addr [option]					//  指定上游服务器(可配置多个)
																	参数1(必须)用于指定上游服务器的地址,可以是:IP地址:端口号 / 带端口号的域名 / Unix套接字
																	参数2(可选)用于指定上游服务器的额外信息,可以是:
																		weight cnts		-> 指定上游服务器接收请求的权重(权重越大,则越容易接收到请求)
																		fail_timeout 	-> 指定上游服务器响应请求的最大时间(若超时,则将上游服务器标记为down)
																		max_fails		-> 在fail_timeout时间内,与上游服务器之间的最大连接次数,
																						   若超过最大限制,则将上游服务器标记为down
																		backup 			-> 指定上游服务器为预备服务器(当其他上游服务器宕机时,它开始接收请求)
																		down 			-> 指定上游服务器不接收任何请求
		}

		# MAIL 												##  配置'邮件代理'
		mail {
			auth_http  authURI;								//  指定POP3或IMAP的认证服务器的URI
			auth_http_header  Header Value 					//  新建或修改发送给认证服务器的请求头
			auth_http_timeout  cnts;						//  指定与认证服务器通信的最大等待时间(默认值为60s)
			<mail-type>_capabilites   ;
			<mail-type>_auth								//  指定支持的客户端认证机制,
																该指令的值与mail-type有关,可以是其中的一个或多个:
																	imap_auth 			-> plain(默认)、login或cram-md5
																	smtp_auth 			-> plain(默认)、login或cram-md5
																	pop3_auth 			-> plain(默认)、apop或cram-md5 
			
			ssl  on/off;									//  启用或禁止HTTPS协议
			ssl_certificate  certPath;						//  指定SSL证书(.PEM格式)的所在路径
			ssl_certificate_key  keyPath;					//  指定SSL证书密钥的所在路径			
			ssl_prefer_server_ciphers  on/off;				//  允许或禁止(使用SSLv3或TLS协议时)服务器密码优先于客户端密码
			ssl_protocols  ...;								//  指定启用哪些SSL协议(默认值为SSLv3,TLSv1,TLSv1.1,TLSv1.2)
			ssl_session_cache  argv;						//  指定SSL缓存的类型和大小
																	off					-> 告知客户端会话无需重用,
																	none				-> 告知客户端会话会被重用,但不是真实的,
																	builtin				-> 使用OpenSSL内置的缓存大小(仅作用于一个worker的会话)
																	shared:name:size	-> 告知所有worker共用同一缓存配置(name对应缓存名,size对应缓存大小(单位:MB))
			ssl_session_timeout  cnts;						//  指定客户端使用相同SSL参数的有效时间(默认值为5m,这些参数储存在缓存中)

		}
	}