1. 核心类
	QObject
		--> 所有'PyQt对象'的基类；
			Tip:当一个'PyQt对象'被删除时,它会发射'destroyed()'信号；
			Tip:当'其他对象'将一个'PyQt对象'作为'父对象'时,该'PyQt对象'自动将'其他对象'纳入自己的'子对象列表'中；

	QPaintDevice
		--> 所有'可绘制对象'的基类；

	QApplication(sys.argv)
		--> return: app_obj,即创建一个'应用对象',
			Tip:继承自QGuiApplication；
			Tip:该类是GUI控制管理和应用设置的基石(包含'主事件循环')；

		.aboutQt()
			--> return: None,即弹出一个(展示Qt版本信息)的'消息框'；

		.windowIcon()
			--> return: icon_obj,即返回'应用对象'的图标；
		.setWindowIcon(icon)
			--> return: None,即设置'应用对象'的图标；

		.wheelScrollLines()
			--> return: int,即返回鼠标滚轮滚动一次,'应用对象'被滚动的行数；
		.setWheelScrollLines(int)
			--> return: None,即设置鼠标滚轮滚动一次,'应用对象'被滚动的行数；

		.focusWidget()
			--> return: wdt_obj/0,即返回键盘输入所在的组件对象(若键盘输入不在任何组件,则返回0)；
		
		.allWidgets()
			--> return: wdt_obj_list,即返回'应用对象'中的所有组件；

		.exec_()
			--> return: None,即退出应用；

		.desktop()
			--> return: desk_obj,即返回'桌面组件'(即根窗口对象)；
		
		.font()
			--> return: font_obj,即返回应用对象的默认字体；
		.setFont(fnt)
			--> return: None,即设置应用对象的默认字体；

		.font(wdt)
			--> return: font_obj,即返回指定组件的默认字体对象；
		
		.activeWindow()
			--> return: wdt_obj,即返回键盘输出所在的顶级窗口对象；
		.setActiveWindow(wdt)
			--> return: None,即将wdt组件设为当前窗口对象；
		
		.doubleClickInterval()
			--> return: int,即返回若判定为双击,则两次单击之间的最大间隔时间(单位:毫秒)；
		.setDoubleClickInterval(int)
			--> return: None,即设置若判定为双击,则两次单击之间的最大间隔时间(单位:毫秒)；
		
		.topLevelAt(point)
		.topLevelAt(x, y)
			--> return: wdt_obj,即返回指定位置的顶级组件；
		.widgetAt(point)
		.widgetAt(x, y)
			--> return: wdt_obj,即返回指定位置的组件；

		// 槽
		.closeAllWindows()
			--> return: None,即关闭所有的'顶级窗口'；

		.setStyleSheet('style')
			--> return: None,
		
		// 信号
		.focusChanged.connect(event_func)

	QWidget(parent)
		--> return: wdt_obj,即创建一个'界面对象',所有'界面对象'的基类；
			Tip:继承自QObject和QPaintDevice；

		.cursor()
			--> return: cur_obj,即返回当前组件的鼠标形状；
		.setCursor(shape)
			--> return: None,即设置当前组件的鼠标形状；
			--> shape ,即常量(from PyQt5.QtCore import Qt)
							Qt.ArrowCursor 			/ 0		标准指针
							Qt.UpArrowCursor 		/ 1
							Qt.CrossCursor 			/ 2
							Qt.WaitCursor 			/ 3		等待沙漏
							Qt.IBeamCursor 			/ 4		文本输入
							Qt.SizeVerCursor 		/ 5
							Qt.SizeHorCursor 		/ 6
							Qt.SizeBDiagCursor 		/ 7
							Qt.SizeFDiagCursor 		/ 8
							Qt.SizeAllCursor 		/ 9		十字交叉箭头
							Qt.BlankCursor			/ 10
							Qt.SplitVCursor 		/ 11
							Qt.SplitHCursor 		/ 12
							Qt.PointingHandCursor   / 13	食指指针
							Qt.ForbiddenCursor	    / 14	禁止圆圈
							Qt.WhatsThisCursor	    / 15	问号指针
							Qt.BusyCursor 			/ 16	繁忙指针
							Qt.OpenHandCursor 		/ 17	抓手指针
							Qt.ClosedHandCursor 	/ 18	握拳抓手
		.unsetCursor()
			--> return: None,即取消当前组件的形状设置；

		.isVisible()
			--> return: bool,即当前组件是否可见；
				Tip:只有当前组件的所有祖先组件都是可见的时,当前组件才是可见的；
		.setVisible(flags)
			--> return: None,即设置当前组件是否可见；
		.show()
			--> return: None,即显示当前组件及其所有子组件；
		.hide()
			--> return: None,即隐藏当前组件及其所有子组件；

		.isWindow()
			--> return: bool,即当前组件是否是独立的窗口；
		.window()
			--> return: wdt_obj,即返回当前组件对应的窗口对象；

		.isModal()
			--> return: bool,即当前组件是否是模式组件；

		.size()
			--> return: size_obj,即返回当前组件的尺寸；
		.resize(w, h) / .resize(size)
			--> return: None,即设置当前组件的尺寸；
		.adjustSize()
			--> return: None,即调整当前组件的尺寸以适应包含的内容；
		.setFixedSize(w, h) / .setFixedSize(size)
			--> return: None,即设置当前组件的固定尺寸；
		
		.pos()
			--> return: point_obj,即返回当前组件在其'父组件坐标系'中的位置；
		.mapFromParent(point)
			--> return: point_obj,即将'父组件坐标系'中的位置point转换为'当前组件坐标系'中的位置并返回；
		.mapFromGlobal(point)
			--> return: point_obj,即将'屏幕坐标系'中的位置point转换为'当前组件坐标系'中的位置并返回；
		.mapToParent(point)
			--> return: point_obj,即将'当前组件坐标系'中的位置point转换为'父组件坐标系'中的位置并返回；
		.mapToGlobal(point)
			--> return: point_obj,即将'当前组件坐标系'中的位置point转换为'屏幕坐标系'中的位置并返回；

		.move(point)
		.move(x, y)
			--> return: None,即设置当前组件距离(0,0)的偏移量；

		.frameGeometry()
			--> return: QRect_obj,即该对象包含窗口的偏移量和宽度、高度(未设置窗口之前默认为(0, 0, 639, 479))；
		.setGeometry(x, y, w, h)
			--> return: None,即设置窗口的偏移量和宽度、高度(等价于.resize()和.move()方法)；
		
		.windowTitle()
			--> return: string,即返回当前窗口的标题；
		.setWindowTitle('title')
			--> return: None,即设置当前窗口的标题；

		.setStatusTip('content')
			--> return: None,即设置当前组件的状态提示框内容；
		
		.setToolTip('content')
			--> return: None,即设置当前组件的工具提示框内容；
		
		.setLayout(layout)
			--> return: None,即设置当前组件的布局格式；
			--> layout ,即QHBoxLayout_obj / QVBoxLayout_obj / QGridLayout_obj / QFormLayout_obj；

		.windowOpacity()
			--> return: double,即返回当前窗口的不透明度(范围为0.0~1.0)；
		.setWindowOpacity(level)
			--> return: None,即设置当前窗口的不透明度(默认为1.0,即完全不透明)；
	
	QFrame()
		--> return: frm_obj,即创建并返回一个框架对象,所有'框架对象'的基类；

		.frameRect()
			--> return: rect_obj,即返回框架的矩形坐标；
		.setFrameRect(rect)
			--> return: None,即设置框架的矩形坐标；

		.frameShape()
			--> return: shape_obj,即返回框架的类型；
		.setFrameShape(shape)
			--> return: None,即设置框架的类型；
			--> shape ,即常量(from PyQt5.QtWidgets import QFrame)
							QFrame.NoFrame			无填充
							QFrame.Box				盒子形状(内含文本)
							QFrame.Panel			面板形状(内含凹陷或凸起的文本)
							QFrame.StyledPanel		自适应面板形状
							QFrame.WinPanel			Windows面板形状
							QFrame.HLine			无填充水平行
							QFrame.VLine			无填充竖直行
		
		.frameStyle()
			--> return: style_obj,即返回框架的风格；
		.setFrameStyle(style)
			--> return: None,即设置框架的风格；
			--> style ,即常量(from PyQt5.QtWidgets import QFrame)
						QFrame.Plain				无3D风格
						QFrame.Raised				凸起3D风格
						QFrame.Sunken				凹陷3D风格

		.frameWidth()
			--> return: int,即返回框架的宽度(受到frameStyle、lineWidth和midLineWidth的影响)；
		
		.lineWidth()
			--> return: int,即返回框架外框的粗度；
		.setLineWidth(int)
			--> return: None,即设置框架外框的粗度；

		.midLineWidth()		
			--> return: int,即返回框架内框的粗度；
		.setMidLineWidth(int)
			--> return: None,即设置框架内框的粗度；

2. 基础对象
	QSize() / QSize(w, h)
		--> return: size_obj,即创建并返回一个'尺寸对象'；
			Tip:from PyQt5.QtCore import QSize

		.isEmpty()
			--> return: bool,即若'当前组件'的宽或高为0甚至负数,返回True；
		.isNull()
			--> return: bool,即若'当前组件'的宽和高均为0,返回True；
		.isValid()
			--> return: bool,即若'当前组件'的宽和高为0甚至正数,返回True；

		.width()
			--> return: int,即返回'当前组件'的宽度；
		.rwidth()
			--> return: ref_w,即返回'当前组件'宽度的引用；
				Tip:操作该方法的'返回值'等价于操作'当前组件'的宽度；
		.setWidth(int)
			--> return: None,即设置'当前组件'的宽度；

		.height()
			--> return: int,即返回'当前组件'的高度；
		.rheight()
			--> return: ref_w,即返回'当前组件'高度的引用；
				Tip:操作该方法的'返回值'等价于操作'当前组件'的高度；
		.setHeight(int)
			--> return: None,即设置'当前组件'的高度；
		
		.transpose()
			--> return: None,即交换'当前组件'的宽和高；
		.transposed()
			--> return: size_obj,即返回交换'当前组件'宽和高后的新'尺寸对象'；

	QIcon('path') / QIcon(icon) / QIcon(pixmap)
		--> return: icon_obj,即创建并返回一个'图标对象'；
			Tip:from PyQt5.QtGui import QIcon
			Tip:图标对象有4种'展示模式',即常量(from PyQt5.QtGui import QIcon)
				QIcon.Normal	无交互时的图标展示
				QIcon.Disabled	不可用时的图标展示
				QIcon.Active 	可用和交互时的图标展示
				QIcon.Selected 	被选中时的图标展示
			
			Tip:图标对象有2种'展示状态',即常量(from PyQt5.QtGui import QIcon)
				QIcon.Off		当组件处于'off'状态时的图标展示
				QIcon.On		当组件处于'on'状态时的图标展示

	QPointF(x, y) / QPointF(point)
		--> return: point_float_obj,即创建并返回一个'点对象'(x&y坐标用'浮点数'表示)；
			Tip:from PyQt5.QtCore import QPointF
			Tip:若x=0.0且y=0.0,则.isNull()返回True；
			Tip:point_float_obj可以被视作矢量类型进行'加减乘除'的操作；
		
		.isNull()
			--> return: bool,即判断当前'点对象'是否是原点(即0,0)；

		.rx()
			--> return: 引用,即返回当前'点对象'的x坐标的引用；
		.x()
			--> return: float,即返回当前'点对象'的x坐标；
		.setX(float)
			--> return: None,即设置当前'点对象'的x坐标；
		.ry()
			--> return: 引用,即返回当前'点对象'的y坐标的引用；
		.y()
			--> return: float,即返回当前'点对象'的y坐标；
		.setY(float)
			--> return: None,即设置当前'点对象'的y坐标；

	QLineF(x1, y1, x2, y2) / QLineF(point, point)
		--> return: line_float_obj,即创建并返回一个'线对象'(起&终点的x&y坐标用'浮点数'表示)；
			Tip:from PyQt5.QtCore import QLineF

		.intersect(line_float)
			--> return: 0/1/2,即判断当前'线对象'是否与line_float相交；
				Tip:0-表示两条线不相交；1-表示两条线相交于各自的实体内；2-表示两条线相交于各自的实体外；

		.angle()
			--> return: float,即返回当前'线对象'的角度(范围为[0,360),x轴顺时针计算)；
		.setAngle(float)
			--> return: None,即设置当前'线对象'的角度(通过改变'终点'的位置来实现)；
		.angleTo(line_float_obj)
			--> return: float,即返回当前'线对象'和line_float_obj的'夹角度数'；

		.center()
			--> return: point_float_obj,即返回当前'线对象'的中心点；
		
		.setLine(x1, y1, x2, y2)
			--> return: None,即设置当前'线对象'的起&终点的x&y坐标；

		.unitVector()
			--> return: line_float_obj,即返回当前'线对象'的单位线对象(即起点和角度相同,长度为1的线对象)； 
		.normalVector()
			--> return: line_float_obj,即返回当前'线对象'的垂直线对象(即起点和长度相同,角度为90的线对象)；
		
		.translate(x, y) / .translate(point)
			--> return: None,即将当前'线对象'水平移动x且竖直移动y；
		
		.isNull()
			--> return: bool,即判断当前'线对象'是否有效；
		
		.length()
			--> return: float,即返回当前'线对象'的长度；
		.setLength(float)
			--> return: None,即设置当前'线对象'的长度；
		.dx()
			--> return: float,即返回当前'线对象'的x坐标跨度；
		.dy()
			--> return: float,即返回当前'线对象'的y坐标跨度；

		.x1()
			--> return: float,即返回当前'线对象'起点的x坐标；
		.x2()
			--> return: float,即返回当前'线对象'终点的x坐标；
		.y1()
			--> return: float,即返回当前'线对象'起点的y坐标；
		.y2()
			--> return: float,即返回当前'线对象'终点的y坐标；
		.p1()
			--> return: point_float_obj,即返回当前'线对象'的起点；
		.setP1(point)
			--> return: None,即设置当前'线对象'的起点；
		.p2()
			--> return: point_float_obj,即返回当前'线对象'的终点；
		.setP2(point)
			--> return: None,即设置当前'线对象'的终点；

	QRect(x, y, w, h) / QRect(topleft_point, size) / QRect(topleft_point, bottomright_point)
		--> return: rect_obj,即创建并返回一个'区域对象'；
			Tip:from PyQt5.QtCore import QRect

		.size()
			--> return: size_obj,即返回当前'区域对象'的尺寸；
		.setSize(size)
			--> return: None,即设置当前'区域对象'的尺寸(左上角不变,调整宽度和高度)；

		.setRect(x, y, w, h)
			--> return: None,即设置当前'区域对象'的偏移量和宽度、高度；
		.setCoords(x1, y1, x2, y2)
			--> return: None,即设置当前'区域对象'的左上点和右下点的坐标；
		
		.moveCenter(point)
			--> return: None,即移动当前'区域对象'的中心点至point(尺寸不变)；
		.moveTo(point) / .moveTo(x, y)
			--> return: None,即移动当前'区域对象'的左上点至point(尺寸不变)；
		.translate(x, y)
			--> return: None,即将当前'区域对象'沿着x轴移动x,沿着y轴移动y(尺寸不变)；
		.translated(x, y)
			--> return: rect_obj,即即将当前'区域对象'沿着x轴移动x,沿着y轴移动y(尺寸不变),然后返回移动后的'区域对象'；

		.left() / .x()
			--> return: int,即返回当前'区域对象'左边的x坐标；
		.top() / .y()
			--> return: int,即返回当前'区域对象'顶边的y坐标；
		.right()
			--> return: int,即返回当前'区域对象'右边的x坐标；
				Tip:因历史原因,真实的右边x坐标为'返回值+1'；

		.bottom()
			--> return: int,即返回当前'区域对象'底边的'y坐标-1'；
				Tip:因历史原因,真实的底边y坐标为'返回值+1'；
		
		.height()
			--> return: int,即返回当前'区域对象'的高度；
		.setHeight(int)
			--> return: None,即设置当前'区域对象'的高度(顶边不变,调整底边)；
		.width()
			--> return: int,即返回当前'区域对象'的宽度；
		.setWidth(int)
			--> return: None,即设置当前'区域对象'的宽度(左边不变,调整右边)；
		
		.intersected(rect)
			--> return: rect_obj,即返回当前'区域对象'和rect对象相交的区域对象；
				Tip:该方法等价于'当前 & rect'；
		.united(rect)
			--> return: rect_obj,即返回当前'区域对象'和rect对象相并的区域对象；
				Tip:该方法等价于'当前 | rect'；
		.transposed()
			--> return: rect_obj,即返回当前'区域对象'互换宽度和高度后的区域对象；

	QFile('path') / QFile('path', parent)
		--> return: file_obj,即创建并返回一个'文件对象'；
			Tip:from PyQt5.QtCore import QFile 

		.fileName()
			--> return: string,即返回当前'文件对象'或.setFileName()方法设置的'路径名'；
		.setFileName('newpath')
			--> return: None,即设置当前'文件对象'的'路径名'；

		.exists()
			--> return: bool,即若当前'文件对象'存在,则返回True；否则,返回False；
		
		.size()
			--> return: int,即返回当前'文件对象'的字节数；
		.resize(int)
			--> return: bool,即重新设置当前'文件对象'的字节数,即多截断少补0(若成功,则返回True；否则,返回False)；

		.copy('newpath')
			--> return: bool,即将当前'文件对象'的内容拷贝至'newpath'文件中(若成功,则返回True)；
				Tip:若'newpath'文件已存在,则返回False；
			
		.open(mode[|mode|...])
			--> return: bool,即打开当前'文件对象'(若成功,则返回True；否则,返回False)；
			--> mode ,即常量from PyQt5.QtCore import QIODevice 
							QIODevice.Append 
							QIODevice.ExistingOnly
							QIODevice.NewOnly
							QIODevice.ReadOnly 
							QIODevice.WriteOnly
							QIODevice.ReadWrite
							QIODevice.Text
							QIODevice.Truncate
							QIODevice.NotOpen
		
		.remove()
			--> return: bool,即删除当前'文件对象'(若成功,则返回True；否则,返回False)；
		
		.close()
			--> return: None,即关闭当前'文件对象'； 
		
		.flush()
			--> return: bool,即将未缓冲的数据写入当前'文件对象'(若成功,则返回True；否则,返回False)；
		
		.pos()
			--> return: int,即返回当前'文件对象'的指针索引位置；
		.seek(int)
			--> return: bool,即设置当前'文件对象'的指针至int索引位置(若成功,则返回True；否则,返回False)；

		.rename('newname')
			--> return: bool,即重命名当前'文件对象'(若成功,则返回True；否则,返回False)；
		
	QRegExp(r'...') / QRegExp(regex)
		--> return: regex_obj,即创建并返回'正则对象'(多用于验证)；
			Tip:from PyQt5.QtCore import QRegExp
		
		.pattern()
			--> return: string,即返回当前'正则对象'对应的文本内容；
		.setPattern(r'...')
			--> return: None,即设置当前'正则对象'对应的文本内容；
		
		.captureCount()
			--> return: int,即返回当前'正则对象'捕获的内容数；
		.capturedTexts()
			--> return: list,即(以列表形式)返回当前'正则对象'捕获的文本内容；

	QAction(parent[, checkable]) / QAction('hint', parent[, checkable]) / QAction(icon_obj, 'hint', parent[, checkable])
		--> return: act_obj,即创建一个'动作组合对象'；
		--> icon_obj ,即该对象的图标(即QIcon()对象)；
		--> hint ,即该对象的提示文本；
		--> checkable ,即该对象是否可被勾选；
			Tip:from PyQt5.QtWidgets import QAction

		.isVisible()
			--> return: bool,即'动作组合对象'是否可见；
		.setVisible(flags)
			--> return: None,即设置'动作组合对象'是否可见；

		.icon()
			--> return: icon,即返回'动作组合对象'的图标；
		.setIcon(icon_obj)
			--> return: None,即设置'动作组合对象'的图标；
		
		.text()
			--> return: string,即返回'动作组合对象'的文本；
		.setText('hint')
			--> return: None,即设置'动作组合对象'的文本；

		.font()
			--> return: font,即返回'动作组合对象'的字体；
		.setFont(font)
			--> return: None,即设置'动作组合对象'的字体；

		.isCheckable()
			--> return: bool,即'动作组合对象'是否是可被勾选的；
		.setCheckable(flag)
			--> return: None,即设置'动作组合对象'是否可被勾选；
		
		.isChecked()
			--> return: bool,即'动作组合对象'是否已被勾选；
		.setChecked(flags)
			--> return: None,即设置'动作组合对象'是否已被勾选；

		.setShortcut('shortcut')
			--> return: None,即设置'动作组合对象'对应的快捷键(例如: 'Ctrl+Q')；

		.setStatusTip('hint')
			--> return: None,即设置该对象对应的状态提示；
		
		.menu()
			--> return: menu_obj,即返回'动作组合对象'所在的菜单对象；
		.setMenu(menu_obj)
			--> return: None,即设置'动作组合对象'所在的菜单对象；
		
		// 信号
		.triggered.connect(event_func)
		.hovered.connect(event_func)
		.toggled.connect(event_func)
		.changed.connect(event_func)
	
	QQueue()
		--> return: fifo_obj,即创建并返回一个(先进先出的)'队列对象'；
			Tip:from PyQt5.QtCore import QQueue
			Tip:继承自QList；
		
		.enqueue(item)
			--> return: None,即向'当前队列对象'的尾部添加一个项目；
		
		.dequeue()
			--> return: item,即移除'当前队列对象'的头部项目并返回它；
		
		.head()
			--> return: ref_head,即返回'当前队列对象'中头部项目的引用；
		
		.swap(fifo)
			--> return: None,即将fifo队列加入到'当前队列对象'的尾部；
	
	QStack()
		--> return: lifo_obj,即创建并返回一个(后进先出的)'栈对象'；
			Tip:from PyQt5.QtCore import QStack
			Tip: 栈中的项目类型必须相同；
		
		.push(item)
			--> return: None,即向'当前栈对象'的顶部添加一个项目；
		
		.pop()
			--> return: item,即移除'当前栈对象'的顶部项目并返回它；
		
		.top()
			--> return: ref_top,即返回'当前栈对象'中头部项目的引用；
		
		.swap(lifo)
			--> return: None,即将lifo栈加入到'当前栈对象'的顶部；
	

3. 常用组件
	// 窗口组件
		QMainWindow()
			--> return: win,即创建并返回'主窗口对象'；
				Tip:from PyQt5.QtWidgets import QMainWindow
				Tip:QMainWindow继承自QWidget,是一个预置了'菜单栏'、'工具栏'、'状态栏'、'悬浮组件'和'中心组件'等区域的'窗口'；
			
			// 菜单栏
			.setMenuBar(menu_bar)
				--> return: None,即将menu_bar设为当前主窗口的'菜单栏对象'；

			.menuBar()
				--> return: menu_bar_obj,即创建并返回一个(父对象为主窗口的)'菜单栏对象'；
				Tip:若想创建一个被所有窗口共享的'菜单栏对象'(即无父对象的'菜单栏对象'),使用QMenuBar(0)来实例化；

				QMenuBar(parent)
					--> return: menu_bar,即'菜单栏对象'的构造器； 

					.clear()
						--> return: None,即清空当前菜单栏；

					.addAction('hint')
					.addAction(icon, 'hint')
						--> return: act_obj,即在当前菜单栏中添加一个'动作组合对象'；
						--> hint ,即鼠标移至上方显示的提示信息；

					.addMenu('title')
					.addMenu(icon, 'title')
						--> return: menu_obj,即在当前菜单栏中添加并返回一个'菜单对象'；
						--> icon ,即对应菜单对象的图标对象；
						--> title ,即对应菜单对象的显示文本；

					.addMenu(menu)
						--> return: act_obj,即在当前菜单栏中添加一个'菜单对象',并返回对应的'动作组合对象'(等价于菜单对象调用自己的menuAction()方法)；

					.actionAt(point)
						--> return: act_obj,即返回指定位置的'动作组合对象'；若没有,则返回0；

					.actionGeometry(act)
						--> return: rect_obj,即返回当前菜单栏对象中指定'动作组合对象'的偏移量和宽度、高度(相关信息包含在QRect对象中)；
					
					.activeAction()
						--> return: act_obj,即返回当前菜单栏对象中被选中的'动作组合对象'；
					.setActiveAction(act)
						--> return: None,即将act设为当前菜单栏中被选中的'动作组合对象'；

					// 槽
					.setVisible(flags)
						--> return: None,即显示/隐藏当前组件；

					// 信号
					.triggered.connect(event_func)
					.hovered.connect(event_func)

						QMenu(parent)
						QMenu('title', parent)
							--> return: menu_obj,即创建并返回一个'菜单对象'；

							.clear()
								--> return: None,即清空当前菜单对象；

							.title()
								--> return: string,即返回当前菜单对象的文本；
							.setTitle('title')
								--> return: None,即设置当前菜单对象的文本；

							.actionAt(point)
								--> return: act_obj,即返回指定位置的'动作组合对象'；若没有,则返回0；

							.actionGeometry(act)
								--> return: rect_obj,即返回当前菜单对象中指定'动作组合对象'的偏移量和宽度、高度(相关信息包含在QRect对象中)；

							.activeAction()
								--> return: act_obj,即返回当前菜单对象中被选中的'动作组合对象'；
							.setActiveAction(act)
								--> return: None,即将act设为当前菜单栏中被选中的'动作组合对象'；

							.defaultAction()
								--> return: act_obj,即返回当前菜单对象中默认被选中的'动作组合对象'； 
							.setDefaultAction(act)
								--> return: act_obj,即设置当前菜单对象中默认被选中的'动作组合对象'； 

							.addAction('hint')
							.addAction(icon, 'hint')
								--> return: act_obj,即在当前菜单对象中添加一个'动作组合对象'；
								--> hint ,即鼠标移至上方显示的提示信息；

							.addMenu('title')
							.addMenu(icon, 'title')
								--> return: menu_obj,即在当前菜单对象中添加并返回一个'子菜单对象'；
								--> icon ,即对应子菜单对象的图标对象；
								--> title ,即对应子菜单对象的显示文本；
							
							.icon()
								--> return: icon_obj,即返回当前菜单对象的图标对象；
							.setIcon(icon)
								--> return: None,即设置当前菜单对象的图标对象；
							
							.isEmpty()
								--> return: bool,即当前菜单对象是否有可见的'动作组合对象'； 

							.menuAction()
								--> return: act_obj,即返回当前菜单对象对应的'动作组合对象'；
							
							// 信号
							.aboutToHide.connect(event_func)
							.aboutToShow.connect(event_func)
							.triggered.connect(event_func)
							.hovered.connect(event_func)

			// 工具栏
			.setIconSize(size)
				--> return: None,即设置主窗口的工具栏的图标尺寸；

			.removeToolBar(tool_bar)
				--> return: None,即移除tool_bar组件(逻辑移除)；

			.addToolBar('text')
			.addToolBar(flags, tool_bar)
				--> return: None,即<Qt.TopToolBarArea>区域创建并返回一个'工具栏对象'或者在指定区域插入一个'工具栏对象'；
				--> flags ,即常量(from PyQt5.QtCore import Qt)
								Qt.LeftToolBarArea
								Qt.RightToolBarArea
								Qt.TopToolBarArea
								Qt.BottomToolBarArea
								Qt.AllToolBarArea
								Qt.NoToolBarArea
				--> tool_bar ,即待插入的'工具栏对象'；

				QToolBar(parent)
				QToolBar('text', parent)
					--> return: tool_bar,即'工具栏对象'的构造器；

					.clear()
						--> return: None,即清空当前工具栏；

					.addAction('hint')
					.addAction(icon, 'hint')
						--> return: act,即在当前工具栏中添加一个'动作组合对象'；
						--> hint ,即鼠标移至上方显示的提示信息；

					.actionAt(point)
					.actionAt(x, y)
						--> return: 0/act,即返回指定位置的'动作组合对象'；若没有,则返回0；

					.toggleViewAction()
						--> return: act,即返回可'隐藏/显示'当前工具栏的'动作组合对象'；
							Tip:该'动作组合对象'的文本默认与'当前工具栏'的文本一致；

					// 反映当前工具栏是否处于悬浮的状态
					.floating
						--> return: bool,即类属性(默认为True)；
					.isFloating()
						--> return: bool,即检视方法(默认为True)；

					// 反映当前工具栏是否可被拖拽为悬浮的独立窗口
					.floatable
						--> return: bool,即类属性(默认为True)；
					.isFloatable()
						--> return: bool,即检视方法(默认为True)；
					.setFloatable(flags)
						--> return: None,即控制方法；
					
					// 反映当前工具栏是否可被移动至其他的工具栏区域
					.movable
						--> return: bool,即类属性(默认为True)；
					.isMovable()
						--> return: bool,即检视方法(默认为True)；
					.setMovable(flags)
						--> return: None,即控制方法；
					
					// 反映当前工具栏是否可被移动至指定的工具栏区域
					.allowedAreas
						--> return: area,即类属性(默认为Qt.AllToolBarAreas)；
					.isAreaAllowed(area)
						--> return: bool,即检视方法；
					.allowedAreas()
						--> return: area,即检视方法(默认为Qt.AllToolBarAreas)；
					.setAllowedAreas(area)
						--> return: None,即控制方法；

					// 反映当前工具栏的扩展方向
					.orientation
						--> return: orient,即类属性(默认为Qt.Horizontal)； 
					.orientation()
						--> return: orient,即检视方法(默认为Qt.Horizontal)；
					.setOrientation(flags)
						--> return: None,即控制方法；
						--> flags ,即常量(from PyQt5.QtCore import Qt)
										Qt.Horizontal
										Qt.Vertical

					// 信号
					.visibilityChanged.connect(event_func)
					.actionTriggered.connect(event_func)
					.allowedAreasChanged.connect(event_func)
					.movableChanged.connect(event_func)
					.orientationChanged.connect(event_func)
					.topLevelChanged.connect(event_func)	# .floating属性改变时发送该信号

			// 状态栏
			.setStatusBar(stat_bar)
				--> return: None,即将stat_bar设为当前主窗口的'状态栏对象'；

			.statusBar()
				--> return: stat_obj,即创建并返回一个'状态栏对象'；

				.currentMessage()
					--> return: string/'',即返回当前的状态信息(若无状态信息,则返回'')；

				// 槽
				.showMessage(msg, timeout=0)
					--> return: None,即隐藏之前的状态信息后显示msg信息timeout毫秒；
					--> timeout ,即若为0,则一直显示msg信息(直到.clearMessage()或.showMessage()被调用)；
				
				.clearMessage()
					--> return: None,即清除状态信息；
				
				// 信号
				.messageChanged.connect(event_func)
			
			// 其他方法
			.addDockWidget(dk_wdt_area, dk_wdt)
				--> return: None,即在指定区域添加dk_wdt组件；
				--> dk_wdt_area ,即常量(from PyQt5.QtCore import Qt)
								Qt.LeftDockWidgetArea
								Qt.RightDockWidgetArea
								Qt.TopDockWidgetArea
								Qt.BottomDockWidgetArea
								Qt.AllDockWidgetArea
								Qt.NoDockWidgetArea
			
			.removeDockWidget(dk_wdt)
				--> return: None,即移除dk_wdt组件(逻辑删除)；

			.dockWidgetArea(dk_wdt)
				--> return: dk_wdt_area,即返回dk_wdt对应的区域；
					Tip:若dk_wdt未加入主窗口,则该方法返回Qt.NoDockWidgetArea；
				
				QDockWidget(parent)
				QDockWidget('text', parent)
					--> return: dk_wdt_obj,即创建并返回一个'悬浮组件'； 

					.setWidget(wdt)
						--> return: None,即将当前悬浮组件中的组件替换为wdt；
							Tip:替换为wdt后,必须显示地调用show()；

			.centralWidget()
				--> return: wdt_obj,即返回主窗口的'中间组件'； 
			.setCentralWidget(wdt)
				--> return: None,即将wdt设为主窗口的'中间组件'；
			.takeCentralWidget()
				--> return: wdt_obj,即移除并返回主窗口的'中间组件'；

			.corner(cor_area)
				--> return: dk_wdt_area,即返回指定corner对应的悬浮组件区域；
				--> cor_area ,即常量(from PyQt5.QtCore import Qt)
								Qt.TopLeftCorner
								Qt.TopRightCorner
								Qt.BottomLeftCorner
								Qt.BottomRightCorner
			.setCorner(cor_area, dk_wdt_area)
				--> return: None,即使用dk_wdt_area区域去占据cor_area区域；
				
			.sender()
				--> return: send_obj,即返回事件的发送方；

				.text()
					--> return: string,即事件的发送方的标签/文本信息；
			
			.close()
				--> return: None,即关闭主窗口(可被视作一个事件函数)；

	// 各式按钮
		QAbstractButton(parent)
			--> 所有按钮类的抽象基类；
				Tip:from PyQt5.QtWidgets import QAbstractButton
				Tip:继承自QWidget；

			.icon()
				--> return: icon_obj,即返回当前按钮的图标；
			.setIcon(icon)
				--> return: None,即设置当前按钮的图标；
			.iconSize()
				--> return: size_obj,即返回当前按钮的图标尺寸；
			.setIconSize(size)
				--> return: None,即设置当前按钮的图标尺寸；
				--> size ,即QSize(w, h)对象；
			
			.text()
				--> return: string,即返回当前按钮的文本；
			.setText(string)
				--> return: None,即设置当前按钮的文本；
			
			.shortcut()
				--> return: key_obj,即返回当前按钮的快捷键；
			.setShortcut('shortcut')
				--> return: None,即设置当前按钮的快捷键；

			.isDown()
				--> return: bool,即当前按钮是否被按下了；
			.setDown(flags)
				--> return: None,即设置当前按钮是否被按下了；
			
			.isCheckable()
				--> return: bool,即当前按钮是否可被勾选；
			.setCheckable(flags)
				--> return: None,即设置当前按钮是否可被勾选；
			
			.isChecked()
				--> return: bool,即当前按钮是否被勾选了；
			.setChecked(flags)
				--> return: None,即设置当前按钮是否被勾选了；
			
			.autoRepeat()
				--> return: bool,即当前按钮被长按时是否重复键入；
			.setAutoRepeat(flags)
				--> return: None,即设置当前按钮被长按时是否重复键入；
			.autoRepeatDelay()
				--> return: bool,即当前按钮被长按时是否先延迟一段时间再重复键入；
			.setAutoRepeatDelay(int)
				--> return: None,即设置当前按钮被长按时重复键入前先延迟的'毫秒数'；
			.autoRepeatInterval()
				--> return: bool,即当前按钮被长按时是否每间隔一段时间就重复键入；
			.setAutoRepeatInterval(int)
				--> return: None,即设置当前按钮被长按时重复键入前间隔的'毫秒数'；
			
			// 信号
			.clicked.connect(event_func)
			.pressed.connect(event_func)
			.released.connect(event_func)
			.toggled.connect(event_func)	# 可勾选按钮状态发生变化时

		QPushButton('text', parent) / QPushButton(icon, 'text', parent) / QPushButton(parent)
			--> return: btn_obj,即创建并返回一个'按钮对象'；

			.autoDefault()
				--> return: bool,即当前按钮是否是'自动默认按钮'(某些平台自动默认按钮会有额外的展示风格)；
			.setAutoDefault(flags)
				--> return: None,即设置当前按钮是否是'自动默认按钮'；
		
			.isDefault()
				--> return: bool,即当前按钮是否是'默认按钮'(常见于用户点击对话框后,默认选中哪个按钮)；
			.setDefault(flags)
				--> return: None,即设置当前按钮是否是'默认按钮'；

			.isFlat()
				--> return: bool,即当前按钮是否是边框平坦的风格；
			.setFlat(flags)
				--> return: None,即设置当前按钮是否是边框平坦的风格(默认为False)；

			.showMenu()
				--> return: None,即显示当前按钮绑定的'弹出菜单'；
			.setMenu(menu_obj)
				--> return: None,即为当前按钮绑定'弹出菜单'；
			
		QRadioButton('text', parent) / QRadioButton(parent)
			--> return: rad_obj,即创建并返回一个'单选框对象'；
				Tip:单选框对象默认是'自动排他的'；

		QCheckBox('text', parent) / QCheckBox(parent)
			--> return: check_obj,即创建并返回一个'复选框对象'；

			.isTristate()
				--> return: bool,即当前'复选框对象'是否是'三态复选框'； 
			.setTristate(flags)
				--> return: None,即是否激活'复选框对象'的三态属性；
				--> flags ,即若flags=True,则激活三态属性(默认复选框对象只有'选中'和'未选中'状态,激活三态属性后还有'未改变'状态)；
			
			// 信号
			.stateChanged.connect(event_func)
	
		QButtonGroup(parent)
			--> return: btnGroup_obj,即创建一个'按钮组对象'；
				Tip:按钮组对象是容纳一个或多个按钮组件的容器；
			
			.addButton(btn_obj, id)
				--> return: None,即向当前按钮组对象中添加一个指定id的按钮对象；
				--> id ,即按钮对应的ID(默认会自动绑定并赋值；若要自定义ID,建议使用正值)；
			.removeButton(btn_obj)
				--> return: None,即从当前按钮组对象中移除一个按钮对象；

			.checkedButton()
				--> return: btn_obj/0,即返回当前按钮组对象中被选中的按钮对象(若没有,则返回0)；
			.checkedId()
				--> return: int/-1,即返回当前按钮组对象中被选中的按钮对象id(若没有,则返回-1)；

			.id(btn_obj)
				--> return: int,即返回btn_obj按钮对象对应的ID；
			.setId(btn_obj, id)
				--> return: None,即设置btn_obj对象对应的ID(不能是-1)；
			
			.exclusive()
				--> return: bool,即当前按钮组对象是否是排他的；
			.setExclusive(flags)
				--> return: None,即设置当前按钮组对象的'排他性'；
			
			// 信号
			.buttonClicked.connect(event_func)
			.buttonPressed.connect(event_func)
			.buttonReleased.connect(event_func)
			.buttonToggled.connect(event_func)

	// 各式编辑框
		QSpinBox(parent)
			--> return: spn_obj,即创建并返回一个'数字调整框对象'；

			.maximum()
				--> return: int,即返回当前'数字调整框'的最大允许值；
			.setMaximum(int)
				--> return: None,即设置当前'数字调整框'的最大允许值；
			.minimum()
				--> return: int,即返回当前'数字调整框'的最小允许值；
			.setMinimum(int)
				--> return: None,即设置当前'数字调整框'的最小允许值；
			.setRange(min, max)
				--> return: None,即设置当前'数字调整框'的最小和最大允许值；

			.value()
				--> return: int,即返回当前'数字调整框'中的值；
			.displayIntegerBase()
				--> return: int,即返回当前'数字调整框'中展示值使用的进制；
			.setDisplayIntegerBase(int)
				--> return: None,即设置当前'数字调整框'中展示值使用的进制；

			.singleStep()
				--> return: int,即返回当前'数字调整框'每调整一次值变动的步长；
			.setSingleStep(int)
				--> return: None,即设置当前'数字调整框'每调整一次值变动的步长；
			
			.cleanText()
				--> return: string,即返回当前'数字调整框'中的文本(除前/后缀和前/后空格外的内容)；
			.prefix()
				--> return: string,即返回当前'数字调整框'中文本的前缀；
			.setPrefix('prefix')
				--> return: None,即设置当前'数字调整框'中文本的前缀；
			.suffix()
				--> return: string,即返回当前'数字调整框'中文本的后缀；
			.setSuffix('suffix')
				--> return: None,即设置当前'数字调整框'中文本的后缀；

			// 槽
			.setValue(int)
				--> return: None,即设置当前'数字调整框'中的值；

			// 信号
			.valueChanged.connect(event_func)
		
		QLineEdit('text', parent) / QLineEdit(parent)
			--> return: line_obj,即创建并返回一个'单行可编辑文本对象',继承自QWidget；
		
			.selectedText()
				--> return: string/'',即返回当前组件被选中的文本(或'',如果没有的话)；
			
			.selectionLength()
				--> return: int,即返回当前组件被选中的文本长度；
			
			.selectionStart()
				--> return: int/-1,即返回当前组件被选中文本开始字符的索引(若无选中文本,则返回-1)；
			.selectionEnd()
				--> return: int/-1,即返回当前组件被选中文本结束字符的索引(若无选中文本,则返回-1)；
			
			.setSelection(start, length)
				--> return: None,即选中部分'文本'；

			.insert(string)
				--> return: None,即删除选中的所有文本并在其原处插入新的string文本；

			.backspace()
				--> return: None,即若该对象中无选中文本,则删除'文本指针'左侧的字符后,将'文本指针'向左移动一个位置；
							若该对象中有选中文本,则将'文本指针'移动至选中文本的开始位置后,删除选中文本；
			.del()
				--> return: None,即若该对象中无选中文本,则删除'文本指针'右侧的字符；
							若该对象中有选中文本,则将'文本指针'移动至选中文本的开始位置后,删除选中文本；

			.cursorForward(flags, steps=1)
				--> return: None,即将'文本指针'向右移动steps个位置(若flags=True,则选中经过的所有文本；若为False,则删除选中文本)； 
			.cursorBackward(flags, steps=1)
				--> return: None,即将'文本指针'向左移动steps个位置(若flags=True,则选中经过的所有文本；若为False,则删除选中文本)； 

			.home(flags)
				--> return: None,即将'文本指针'移动至行文本的开始位置(若flags=True,则选中经过的所有文本；若为False,则取消经过的所有已选中文本)；
			.end(flags)
				--> return: None,即将'文本指针'移动至行文本的结束位置(若flags=True,则选中经过的所有文本；若为False,则取消经过的所有已选中文本)；
			
			.selectAll()
				--> return: None,即选中所有文本后将'文本指针'移动至结束位置；
			.deselect()
				--> return: None,即取消选中的所有文本；

			.isModified()
				--> return: bool,即当前组件的文本是否已经被用户修改；
			.setModified(flags)
				--> return: None,即设置当前组件的文本是否已经被用户修改；

			.isReadOnly()
				--> return: bool,即当前组件是否是'只读的'；
			.setReadOnly(flags)
				--> return: None,即设置当前组件的'只读属性'；

			.isRedoAvailable()
				--> return: bool,即当前组件是否支持重做操作(默认为False,当用户执行过操作后变为True)；

			.isUndoAvailable()
				--> return: bool,即当前组件是否支持撤销操作(默认为False,当用户执行过操作后变为True)；

			.echoMode()
				--> return: echo_mode_obj,即返回当前组件的'展示/回显模式'； 
			.setEchoMode(echo_mode)
				--> return: None,即设置当前组件的'展示/回显模式'；
				--> echo_mode ,即常量(from PyQt5.QtWidgets import QLineEdit)
									QLineEdit.Normal / 0				(默认)按文本键入时的原样展示
									QLineEdit.NoEcho / 1 				不展示(适用于保护密码长度)
									QLineEdit.Password / 2				按系统规定的密码样式展示
									QLineEdit.PasswordEchoOnEdit / 3	当编辑时展示文本否则展示密码

			.displayText()
				--> return: ''/'****'/string,即返回当前组件的'展示文本'(受echo_mode影响)；
			
			.text()
				--> return: string,即返回当前组件的文本； 
			.setText(string)
				--> return: None,即设置当前组件的文本(文本长度受.maxLength()制约)；

			.placeholderText()
				--> return: string,即返回当前组件的提示文本；
			.setPlaceholderText('hint')
				--> return: None,即设置当前组件的提示文本；

			.maxLength()
				--> return: int,即返回当前组件的最长字符量；
			.setMaxLength(int)
				--> return: None,即设置当前组件的最长字符量；
			
			.textMargins()
				--> return: margin_obj,即返回当前组件的文本外边距；
			.setTextMargins(left_int, top_int, right_int, bottom_int)
				--> return: None,即设置当前组件的文本外边距；

			.alignment()
				--> return: align_obj,即返回当前组件的对齐方式；
			.setAlignment(align|align)
				--> return: None,即设置当前组件的对齐方式；
				--> align ,即常量(from PyQt5.QtCore import Qt)
								Qt.AlignLeft		Qt.AlignTop
								Qt.AlignRight		Qt.AlignBottom
								Qt.AlignHCenter		Qt.AlignVCenter
								Qt.AlignJustify		Qt.AlignBaseline
								Qt.AlignCenter 		# 水平和竖直均居中对齐

			// 槽
			.clear()
				--> return: None,即清除所有文本；
			.copy()
				--> return: None,即将选中文本拷贝进'粘贴板'； 
			.cut()
				--> return: None,即将选中文本拷贝进'粘贴板'并在当前组件中删除它；
			.paste()
				--> return: None,即从'粘贴板'中将拷贝的文本插入至'文本指针'的当前位置并在粘贴板中删除它；
			.redo()
				--> return: None,即重做(前提是.isRedoAvailable()为True)；
			.undo()
				--> return: None,即撤销(前提是.isUndoAvailable()为True)；

			// 信号
			.editingFinished.connect(event_func)
			.inputRejected.connect(event_func)
			.returnPressed.connect(event_func)
			.selectionChanged.connect(event_func)
			.textChanged.connect(event_func)
			.textEdited.connect(event_func)

		QTextEdit('text', parent) / QTextEdit(parent)
			--> return: text_obj,即创建并返回一个'多行可编辑文本对象'；

			.acceptRichText()
				--> return: bool,即当前组件是否接受'富本文内容'；
			.setAcceptRichText(flags)
				--> return: None,即设置当前组件是否接受'富本文内容'；
			
			.cursorWidth()
				--> return: int,即返回当前组件中指针的宽度；
			.setCursorWidth(int)
				--> return: None,即设置当前组件中指针的宽度；

			.toHtml()
				--> return: html_str,即将当前组件中的文本转换成HTML格式后返回；
			.setHtml(html_str)
				--> return: None,即将输入的文本视作富本文；
			.toPlainText()
				--> return: plain_str,即将当前组件中的文本转换成纯文本格式后返回；
			.setPlainText(plain_str)
				--> return: None,即将输入的文本视作纯文本；
			
			.placeholderText()
				--> return: string,即返回当前组件的提示文本；
			.setPlaceholderText('hint')
				--> return: None,即设置当前组件的提示文本；

			.isReadOnly()
				--> return: bool,即当前组件是否是'只读的'；
			.setReadOnly(flags)
				--> return: None,即设置当前组件的'只读属性'；

			.isUndoRedoEnabled()
				--> return: bool,即当前组件是否支持撤销和重做操作；
			.setUndoRedoEnabled(flags)
				--> return: None,即设置当前组件是否支持撤销和重做操作；

			.alignment()
				--> return: align_obj,即返回当前组件的对齐方式；
			.setAlignment(align|align)
				--> return: None,即设置当前组件的对齐方式；
				--> align ,即常量(from PyQt5.QtCore import Qt)
								Qt.AlignLeft		Qt.AlignTop
								Qt.AlignRight		Qt.AlignBottom
								Qt.AlignHCenter		Qt.AlignVCenter
								Qt.AlignJustify		Qt.AlignBaseline
								Qt.AlignCenter 		# 水平和竖直均居中对齐
			
			.textBackgroundColor()
				--> return: color_obj,即返回当前组件的背景颜色；
			.setTextBackgroundColor(color)
				--> return: None,即设置当前组件的背景颜色；

			.fontFamily()
				--> return: string,即返回当前组件的文本字体系列；
			.setFontFamily('fontFamily')
				--> return: None,即设置当前组件的文本字体系列；
			.fontPointSize()
				--> return: int,即返回当前组件的文本字体点数；
			.setFontPointSize()
				--> return: None,即设置当前组件的文本字体点数；
			.fontWeight()
				--> return: int,即返回当前组件的文本字体粗细；
			.setFontWeight(int)
				--> return: None,即设置当前组件的文本字体粗细；
			.fontItalic()
				--> return: bool,即当前组件的文本是否是斜体；
			.setFontItalic(flags)
				--> return: None,即设置当前组件的文本是否是斜体；
			.fontUnderline()
				--> return: bool,即当前组件的文本是否有下划线；
			.setFontUnderline(flags)
				--> return: None,即设置当前组件的文本是否有下划线；

			.textColor()
				--> return: color_obj,即返回当前组件的本文颜色；
			.setTextColor(color)
				--> return: None,即设置当前组件的本文颜色；

			.text()
				--> return: string,即返回当前组件的文本；
			.setText('text')
				--> return: None,即将content内容显示至当前的'块文本'；
			
			// 槽
			.clear()
				--> return: None,即清除所有文本；
			.copy()
				--> return: None,即将选中文本拷贝进'粘贴板'； 
			.cut()
				--> return: None,即将选中文本拷贝进'粘贴板'并在当前组件中删除它；
			.paste()
				--> return: None,即从'粘贴板'中将拷贝的文本插入至'文本指针'的当前位置并在粘贴板中删除它；
			.redo()
				--> return: None,即重做(前提是.isUndoRedoEnable()为True)；
			.undo()
				--> return: None,即撤销(前提是.isUndoRedoEnable()为True)；


	// 各式对话框
		QFileDialog(parent, 'title', 'dir_path', 'filter_1;;filter_2;;...')
			--> return: dlg_file,即创建并返回一个'文件选择对话框'；

			QFileDialog.getOpenFIleName(parent, 'title', 'dir_path', 'filter_1;;filter_2;;...')
				--> return: ('choose_path', 'filter'),即弹出一个文件选择框并返回选中文件的绝对路径和对应的filter；
					Tip:若未选中任何文件,则返回('', '')；
			QFileDialog.getOpenFIleNames(parent, 'title', 'dir_path', 'filter_1;;filter_2;;...')
				--> return: (path_list, 'filter'),即弹出一个文件选择框并返回所有选中文件的绝对路径和对应的filter；
			QFileDialog.getExistingDirectory(parent, 'title', 'dir_path')
				--> return: 'choose_path',即弹出一个目录选择框并返回选中目录的绝对路径；
			QFileDialog.getSaveFileName(parent, 'title', 'dir_path', 'filter_1;;filter_2;;...')
				--> return: ('choose_path', 'filter'),即弹出一个保存选择框并返回保存的绝对路径和对应的filter；
			
			.open()
				--> return: None,即弹出当前'文件对话框'； 

			.acceptMode()
				--> return: flags,即返回当前'文件对话框'是'选择对话框'还是'保存对话框'；
							flags即常量(from PyQt5.QtWidgets import QFileDialog)
									QFileDialog.AcceptOpen
									QFileDialog.AcceptSave
			.setAcceptMode(flags)
				--> return: None,即设置当前'文件对话框'是'选择对话框'还是'保存对话框'；

			.viewMode()
				--> return: flags,即返回当前'文件对话框'的显示程度；
							flags即常量(from PyQt5.QtWidgets import QFileDialog)
									QFileDialog.Detail
									QFileDialog.List
			.setViewMode(flags)	
				--> return: None,即设置当前'文件对话框'的显示程度；	

			.fileMode()
				--> return: flags,即返回当前'文件对话框'点击确认后返回什么内容；
							flags即常量(from PyQt5.QtWidgets import QFileDialog)
									QFileDialog.AnyFile
									QFileDialog.Directory 
									QFileDialog.DirectoryOnly
									QFileDialog.ExistingFile
									QFileDialog.ExistingFiles
			.setFileMode(flags)
				--> return: None,即设置当前'文件对话框'点击确认后返回什么内容；	

			.labelText(flags)
				--> return: string,即返回当前'文件对话框'对应标签的内容；
				--> flags ,即常量(from PyQt5.QtWidgets import QFileDialog)
								QFileDialog.Accept
								QFileDialog.Reject
								QFileDialog.FileName
								QFileDialog.FileType
								QFileDialog.LookIn
			.setLabelText(flags, 'text')
				--> return: None,即设置当前'文件对话框'对应标签的内容；
			
			.history()
				--> return: list,即返回历史记录列表；
			.setHistory(list)
				--> return: None,即设置历史记录列表；
				--> list ,即内含字符串的列表；
			
			// 信号
			.directoryEntered.connect(event_func)
			.fileSelected.connect(event_func)		// 选中并确认文件时发射信号
			.filesSelected.connect(event_func)
			.filterSelected.connect(event_func)		// 选中(即切换)过滤器时发射信号

		QColorDialog(parent)
		QColorDialog(init_color, parent)
			--> return: color_obj,即创建并返回一个'颜色框对象'；
			--> init_color ,即指定初始颜色(例如: QColor(r, g, b))；

			.currentColor()
				--> return: color_obj,即返回用户当前选择的颜色；
			.setCurrentColor(color)
				--> return: None,即设置颜色框当前的颜色；
			
			.selectedColor()
				--> return: color_obj,即返回用户点击按钮确认后的颜色(可能与.currentColor()的不一致)；
			
			.options()
				--> return: color_opt,即返回颜色框的类型；
			.setOptions(color_opt)
				--> return: None,即设置颜色框的类型；
				--> color_opt, 即常量(from PyQt5.QtWidgets import QColorDialog)
									QColorDialog.ShowAlphaChannel		颜色框中允许用户选择颜色的透明度
									QColorDialog.NoButtons				颜色框不显示'OK'和'Cancel'按钮
									QColorDialog.DontUseNativeDialog	使用Qt的标准颜色框而不是操作系统的原生颜色框

			QColorDialog.getColor(init_color, parent, 'text')
				--> return: color_obj,即显示(弹出)并返回一个QColorDialog对话框；
				
				.isValid()
					--> return: True/False,即判断QColorDialog对话框是否有效；
				
				.name()
					--> return: string,即返回QColorDialog对话框当前的颜色；
			
			// 信号
			.colorSelected.connect(event_func)
			.currentColorChanged.connect(event_func)

		QComboBox(parent)
			--> return: comb_obj,即创建并返回一个'下拉框对象'；

			.clear()
				--> return: None,即清空当前'下拉框对象'中的所有项；
			
			.addItem('text', data)
			.addItem(icon, 'text', data)
				--> return: None,即向'下拉框对象'中添加一个项目；
			
			.removeItem(index)
				--> return: None,即移除'下拉框对象'中的第index项；

			.setItemIcon(index, icon)
				--> return: None,即将'下拉框对象'中第index项的图标设为icon；
			.setItemText('text')
				--> return: None,即将'下拉框对象'中第index项的文本设为text；
				
			.count()
				--> return: int,即返回'下拉框对象'中的总项数；

			.completer()
				--> return: cmp_obj,即返回'自动补齐对象'；
			
			.currentData(role)
			
			.currentIndex()
				--> return: int,即返回'下拉框对象'中当前项的索引；

			.currentText()
				--> return: string,即返回'下拉框对象'中当前项的文本；

			.isEditable()
				--> return: bool,即'下拉框对象'是否可被用户编辑；
			.setEditable(flags)
				--> return: None,即设置'下拉框对象'的可编辑性(默认为False)；

		QMessageBox(parent)
			--> return: msgBox_obj,即创建并返回一个'消息框对象'； 

			.addButton('text', role)
			.addButton(stdBtn)
				--> return: btn_obj,即
				--> role ,即常量(from PyQt5.QtWidgets import QMessageBox)
								QMessageBox.InvalidRole
								QMessageBox.AcceptRole
								QMessageBox.RejectRole
								QMessageBox.ActionRole
								QMessageBox.HelpRole
								QMessageBox.YesRole
								QMessageBox.NoRole
								QMessageBox.ApplyRole
								QMessageBox.ResetRole
								QMessageBox.DestructiveRole
			
			.text()
				--> return: string,即返回消息框的文本；
			.setText('text')
				--> return: None,即设置消息框的文本；
			
			.setIcon(flags)
				--> return: None,即设置消息框的类型图标；
				--> flags ,即常量(from PyQt5.QtWidgets import QMessageBox)
								QMessageBox.NoIcon 
								QMessageBox.Question
								QMessageBox.Information
								QMessageBox.Warning
								QMessageBox.Critical
		
			QMessageBox.warning(parent, 'title', 'text', QMessageBox.Ok, defaultBtn=NoButton)
				--> return: stdBtn_obj,即创建一个警示框；

			QMessageBox.question(parent, 'title', 'text', QMessageBox.Yes|QMessageBox.No, defaultBtn=btn_1)
				--> return: stdbtn_obj,即创建一个询问框并返回用户选择的结果；
							可以为(from PyQt5.QtWidgets import QMessageBox)
									QMessageBox.Ok
									QMessageBox.Cancel
									QMessageBox.Open
									QMessageBox.Save
									QMessageBox.Close
									QMessageBox.Apply 
									QMessageBox.Reset 
									QMessageBox.Yes
									QMessageBox.YesToAll
									QMessageBox.No
									QMessageBox.NoToAll
									QMessageBox.Discard
									QMessageBox.Ignore
									QMessageBox.Help
									QMessageBox.Abort
									QMessageBox.Retry
									QMessageBox.NoButton
				--> parent ,即设置消息框的父组件对象(即意味着哪个组件中包含当前消息框)；
				--> title ,即设置消息框的标题；
				--> text ,即设置消息框的文本信息；
				--> defaultBtn ,即第一个按钮(QMessageBox.Yes或QMessageBox.No)；

		QInputDialog(parent)
			--> return: input_obj,即创建并返回一个'输入框对象'； 

			.setOkButtonText('text')
				--> return: None,即设置'输入框对象'中确认按钮的文本；
			.setCancelButtonText('text')
				--> return: None,即设置'输入框对象'中取消按钮的文本；
			
			.textValue()
				--> return: string,即返回'输入框对象'中的文本；
			.setTextValue('text')
				--> return: None,即设置'输入框对象'中的文本；

			QInputDialog.getText(parent, 'title', 'context')
				--> return: (input, flag),即创建一个具有Cancel和OK按钮的对话框,并返回用户输入的内容(即input)和用户点击的按钮(即flag)；

	// 各式图片
		QImage
			--> return: img_obj,即创建并返回一个'图片对象'；
				Tip:QImage类被用于I/O,以及图片的像素访问和操作；

		QBitmap
			--> return: bit_obj,
				Tip:QBitmap类继承自QPixmap,即像素深度为1的QPixmap；
		
		QPicture
			--> return: pic_obj,
				Tip:QPicture类被用于记录和重现QPainter命令；
				
		QPixmap(w, h)
		QPixmap(size)
		QPixmap('path')
		QPixmap(pix_obj)
			--> return: pix_obj,即创建并返回一个(幕后的)'图片对象'；
				Tip:QPixmap类被用于在屏幕上显示图片；
			--> path ,即pix_obj对象所在的绝对路径；

			.depth()
				--> return: int,即返回pix_obj对象的像素深度(即bpp,储存每个像素使用的位数,被用于度量图像的分辨率)；
			
			.width()
				--> return: int,即返回pix_obj对象的宽度；

			.height()
				--> return: int,即返回pix_obj对象的高度；
			
			.size()
				--> return: size_obj,即返回pix_obj对象的尺寸；
			
			.fill(color)
				--> return: None,即使用color填充pix_obj对象；
			
			.swap(pix_obj)
				--> return: None,即使用pix_obj对象替换当前的；
			
			.scaled(size)
			.scaled(width, height)
				--> return: pix_obj,即将当前的pix_obj按比例缩放,并返回结果副本；
			.scaledToWidth(width, mode)
				--> return: pix_obj,即将当前的pix_obj按mode模式等比缩放至width高度,并返回结果副本；
				--> mode ,即常量(from PyQt5.QtCore import Qt)
								Qt.FastTransformation / 0	快速缩放,无平滑处理
								Qt.SmoothTransformation / 1	双线性过滤处理
			.scaledToHeight(height, mode)
				--> return: pix_obj,即将当前的pix_obj按mode模式等比缩放至height高度,并返回结果副本；
				--> mode ,即常量(from PyQt5.QtCore import Qt)
								Qt.FastTransformation / 0	快速缩放,无平滑处理
								Qt.SmoothTransformation / 1	双线性过滤处理

			.isNull()
				--> return: bool,即当前pix_obj对象是否为空；

			.hasAlpha()
				--> return: bool,即若pix_obj对象拥有'透明图层'或'遮罩',则返回True；否则返回False；
			
			.isQBitmap()
				--> return: bool,即若pix_obj对象为QBitmap对象,则返回True；否则返回False；
			
			.load('path')
				--> return: bool,即加载指定路径下的pix_obj对象；若加载成功,则返回True,否则返回False；
			
			.save('path', 'format', quality)
				--> return: bool,即将当前的pix_obj对象保存至path路径下(以format格式和quality质量)；若保存成功,则返回True,否则返回False； 
				--> format ,即字符常量,可以为:
							BMP		支持读/写
							GIF 	支持读
							JPG		支持读/写
							JPEG	支持读/写
							PNG 	支持读/写
							PBM 	支持读
							PGM		支持读
							PPM 	支持读/写
							XBM 	支持读/写
							XPM 	支持读/写
				--> quality ,即int(0~100/-1,0为最小压缩、100为无压缩，-1为默认配置)；

			.mask()
				--> return: pix_obj,即返回当前pix_obj对象的alpha图层；
			.setMask(mask)
				--> return: pix_obj,即在当前pix_obj对象上添加mask遮罩,并返回结果副本；
				--> mask ,即新的pix_obj对象(与当前的尺寸一致,新的pix_obj对象中像素为0变透明,为1不变)；

			.toImage()
				--> return: img_obj,即将当前pix_obj对象转换为img_obj对象并返回；
			.fromImage(img_obj)
				--> return: pix_obj,即将img_obj对象转换为pix_obj对象并返回；

	// 其他组件
		QLabel('text', parent) / QLabel('text')
		--> return: label_obj,即用于展示文本/图片/影片的组件(无交互操作),继承自QFrame；
		
			.text()
				--> return: string/'',即返回当前组件的文本；
			.pixmap()
				--> return: pix_obj,即返回当前组件中的图片；
			.picture()
				--> return: pic_obj,即返回当前组件中的图片；
			.movie()
				--> rerurn: ptr_obj,即返回当前组件中的影片指针；

			.buddy()
				--> return: wdt_obj,即返回当前组件的绑定组件(要求当前组件的'text'必须以'&'字符开头,例如: QLabel('&File', parent))；
			.setBuddy(wdt_obj)
				--> return: None,即设置当前组件的绑定组件(要求当前组件的'text'必须以'&'字符开头,例如: QLabel('&File', parent))；

			.margin()
				--> return: int,即返回当前组件的外边距；
			.setMargin(int)
				--> return: None,即设置当前组件的外边距；
			
			.indent()
				--> return: int,即返回当前组件的内边距；
			.setIndent(int)
				--> return: None,即设置当前组件的内边距；

			.hasSelectedText()
				--> return: bool,即当前组件中是否有被选中的文本；
			.selectionStart()
				--> return: int/-1,即返回选中文本的第一个字符的索引；若没有选中的文本,则返回-1；
			.setSelection(start, length)
				--> return: None,即选中部分'文本'；
			
			.hasScaledContents()
				--> return: bool,即当前组件中的内容是否按比例充满整个组件；
			.setScaledContents(flags)
				--> return: None,即设置当前组件中的内容是否按比例充满整个组件(默认为False)；

			.alignment()
				--> return: align_obj,即返回组件中文本/图片/影片的排列规则；
			.setAlignment(align|align)
				--> return: None,即设置组件中文本/图片/影片的排列规则；
				--> align ,即常量(from PyQt5.QtCore import Qt)
								Qt.AlignLeft		Qt.AlignTop
								Qt.AlignRight		Qt.AlignBottom
								Qt.AlignHCenter		Qt.AlignVCenter
								Qt.AlignJustify		Qt.AlignBaseline
								Qt.AlignCenter 		# 水平和竖直均居中对齐
			
			// 槽
			.clear()
				--> return: None,即清除当前组件中的内容；
			.setText(string)
				--> return: None,即设置当前组件中的文本；
			.setNum(int/double)
				--> return: None,即设置当前组件中的数字；
			.setPixmap(pix_obj)
				--> return: None,即设置当前组件中的图片；
			.setPicture(pic_obj)
				--> return: None,即设置当前组件中的图片；
			.setMoive(movie_obj)
				--> return: None,即设置当前组件中的影片；
			
			// 信号
			.linkActivated.connect(event_func)
			.linkHovered.connect(event_func)

		QLCDNumber(parent)
			QLCDNumber(num, parent)
				--> return: lcd_obj,即创建并返回一个'LCD数字对象'；

				.digitCount()
					--> return: int,即返回'LCD数字对象'的当前值；
				
				.setMode(flags)
					--> return: None,即设置'LCD数字对象'的数字模式；
					--> flags ,即数字模式,可以为Dec(默认)/Bin/Oct/Hex；

		QSlider(direction, parent)
			--> return: sld_obj,即创建并返回一个'滑块对象'；
			--> direction ,即滑块的方向,可以为Qt.Horizontal/Qt.Vertical；

			.setTickInterval(int)
				--> return: None,即

			.tickPosition()
				--> return: int,即返回当前滑块的位置；

			.valueChanged.connect(event_func)
				--> return: None,即将'滑块对象操作'与'event_func'绑定；

		QProgressBar(parent)
			--> return: pro_bar_obj,即创建并返回一个'进度条对象'；

		QBasicTimer()
			--> return: timer_obj,即创建并返回一个'计时器对象'；

			.start(time, recv)
				--> return: None,即启动计时
				--> time ,即完成时间；
				--> recv ,即事件目标对象；

	// 各式布局
		QBoxLayout() / QBoxLayout(direction|direction, parent)
			--> return: box_obj,即创建并返回一个'盒子对象'；
			--> direction ,即常量(from PyQt5.QtWidgets import QBoxLayout)
										水平方向					竖直方向
								QBoxLayout.LeftToRight		QBoxLayout.BottomToTop
								QBoxLayout.RightToLeft		QBoxLayout.TopToBottom
		QHBoxLayout() / QHBoxLayout(parent)
			--> return: hbox_obj,即创建并返回一个'水平盒子'；
		QVBoxLayout() / QVBoxLayout(parent)
			--> return: vbox_obj,即创建并返回一个'竖直盒子'；

			.direction()
				--> return: const,即返回'当前盒子对象'的方向；
			.setDirection(direction)
				--> return: None,即设置'当前盒子对象'的方向；
			
			.geometry()
				--> return: rect_obj,即返回'当前盒子对象'的区域；
			.setGeometry(rect)
				--> return: None,即设置'当前盒子对象'的区域；
			
			.addWidget(wdt, stretch=0, QBoxLayout.LeftToRight|QBoxLayout.TopToBottom)
				--> return: None,即向'当前盒子对象'中添加wdt组件；
			.insertWidget(index, wdt, stretch=0, QBoxLayout.LeftToRight|QBoxLayout.TopToBottom)
				--> return: None,即向'当前盒子对象'的指定位置添加wdt组件；
									
			.addLayout(layout, stretch=0)
				--> return: None,即向'当前盒子对象'中添加layout布局对象；
			.insertLayout(index, layout, stretch=0)
				--> return: None,即向'当前盒子对象'的指定位置添加layout布局对象；
			
			.spacing()
				--> return: int,即返回'当前盒子对象'的内距；
			.setSpacing(int)
				--> return: None,即设置'当前盒子对象'的内距；

			.stretch(index)
				--> return: int,即返回'当前盒子对象'指定位置的拉伸因子；
			.setStretch(index, int)
				--> return: None,即设置'当前盒子对象'指定位置的拉伸因子；

		QGridLayout() / QGridLayout(parent)
			--> return: grid_obj,即创建并返回一个'网格对象'；

			.geometry()
				--> return: rect_obj,即返回'当前网格对象'的区域；
			.setGeometry(rect)
				--> return: None,即设置'当前网格对象'的区域；

			.addWidget(wdt, x, y, rows, cols, align|align)
				--> return: None,即向'当前网格对象'中添加wdt组件；
				--> x,y ,即在网格对象中组件的坐标位置(左上角为0,0)；
				--> rows, columns ,即在网格对象中组件跨越的行数和列数；
			
			.addLayout(layout, x, y, align|align)
				--> return: None,即向'当前网格对象'中添加layout布局对象；
				--> x,y ,即在网格对象中组件的坐标位置(左上角为0,0)；
			
			.cellRect(row, col)
				--> return: rect_obj,即返回'当前网格对象'指定位置组件的区域；
			
			.spacing()
				--> return: int,即返回'当前网格对象'水平和竖直组件的内距；
			.setHorizontalSpacing(int)
				--> return: None,即设置'当前网格对象'水平组件的内距；
			.setVerticalSpacing(int)
				--> return: None,即设置'当前网格对象'竖直组件的内距；
			.setSpacing(int)
				--> return: None,即设置'当前网格对象'水平和竖直组件的内距；

			.rowCount()
				--> return: int,即返回'当前网格对象'中的总行数；
			.columnCount()
				--> return: int,即返回'当前网格对象'中的总列数；

		QFormLayout() / QFormLayout(parent)
			--> return: form_obj,即创建并返回一个'表单盒子'；

			.geometry()
				--> return: rect_obj,即返回'当前网格对象'的区域；
			.setGeometry(rect)
				--> return: None,即设置'当前网格对象'的区域；

			.fieldGrowthPolicy()
				--> return: field_policy,
			.setFieldGrowthPolicy(field_policy)
				--> return: None,
				--> field_policy ,即常量(from PyQt5.QtWidgets import QFormLayout)
									QFormLayout.AllNonFixedFieldsGrow
									QFormLayout.ExpandingFieldsGrow
									QFormLayout.FieldsStayAtSizeHint
			
			.rowWrapPolicy()
				--> return: wrap_policy,
			.setRowWrapPolicy(wrap_policy)
				--> return: None,
				--> wrap_policy ,即常量(from PyQt5.QtWidgets import QFormLayout)
									QFormLayout.DontWrapRows
									QFormLayout.WrapAllRows
									QFormLayout.WrapLongRows

			.addRow(label, field)
				--> return: None,即向'当前表单对象'中添加行内容；
				--> label, 即QLabel对象；
			.addRow(wdt)
				--> return: None,即向'当前表单对象'中添加wdt组件(横跨所有列)；
			.addRow(layout)
				--> return: None,即向'当前表单对象'中添加layout组件(横跨所有列)；
			.insertRow(index, label, field)
				--> return: None,即向'当前表单对象'指定行的位置添加行内容；
			.insertRow(index, wdt)
				--> return: None,即向'当前表单对象'指定行的位置添加wdt组件；
			.insertRow(index, layout)
				--> return: None,即向'当前表单对象'指定行的位置添加layout布局对象；
			.removeRow(index)
				--> return: None,即从'当前表单对象'中删除指定行的内容；
			.removeRow(wdt)
				--> return: None,即从'当前表单对象'中删除wdt组件所在的行内容；
			.removeRow(layout)
				--> return: None,即从'当前表单对象'中删除layout布局对象所在的行内容；

			.rowCount()
				--> return: int,即返回'当前网格对象'中的总行数；
			
			.spacing()
				--> return: int,即返回'当前网格对象'水平和竖直组件的内距；
			.setHorizontalSpacing(int)
				--> return: None,即设置'当前网格对象'水平组件的内距；
			.setVerticalSpacing(int)
				--> return: None,即设置'当前网格对象'竖直组件的内距；
			.setSpacing(int)
				--> return: None,即设置'当前网格对象'水平和竖直组件的内距；

			.formAlignment()
				--> return: align_obj,即返回'当前网格对象'水平和竖直方向的对齐方式；
							即常量(from PyQt5.QtCore import Qt)
								Qt.AlignLeft		Qt.AlignTop
								Qt.AlignRight		Qt.AlignBottom
								Qt.AlignHCenter		Qt.AlignVCenter
								Qt.AlignJustify		Qt.AlignBaseline
								Qt.AlignCenter 		# 水平和竖直均居中对齐
			.setFormAlignment(align|align)
				--> return: None,设置'当前网格对象'水平和竖直方向的对齐方式；
			
5. 数据库
	QSqlDatabase() / QSqlDatabase(sqldb) / QSqlDatabase('driver')
		--> return: sqldb_obj,即一个实例对象对应一个数据库连接(通过支持的数据库驱动)；
			Tip:QSqlDatabase()创建的是'空的、无效的'连接对象,但是调用它的方法会返回'有效的'连接对象；
			Tip:QSqlDatabase(sqldb)创建的是sqldbb连接对象的拷贝副本；
			Tip:QSqlDatabase('driver')创建的是指定驱动的连接对象,driver可以是:
					'QMYSQL'	-> MySQL驱动
					'QOCI'		-> Oracle驱动
					'QPSQL'		-> PostgreSQL驱动
		
		.addDatabase('driver', conn_name)
			--> return: sqldb_obj,即创建一个指定驱动的连接对象；
		
		.drivers()
			--> return: list,即以'字符串列表'形式返回所有可用的数据库驱动；

		.lastError()
			--> return: sqlerror_obj,即返回数据库的最后错误操作的信息；
		
		.hostName()
			--> return: string,即返回当前'连接对象'连接的主机名；
		.setHostName('host')
			--> return: None,即设置当前'连接对象'连接的主机名；
		
		.port()
			--> return: int,即返回当前'连接对象'连接的端口号；
		.setPort(int)
			--> return: None,即设置当前'连接对象'连接的端口号；
		
		.userName()
			--> return: string,即返回当前'连接对象'连接的用户名；
		.setUserName('username')
			--> return: None,即设置当前'连接对象'连接的用户名；

		.password()
			--> return: string,即返回当前'连接对象'连接的密码；
		.setPassword('password')
			--> return: None,即设置当前'连接对象'连接的密码；

		.databaseName()
			--> return: string,即返回当前'连接对象'连接的数据库名；
		.setDatabaseName('dbname')
			--> return: None,即设置当前'连接对象'连接的数据库名；

		.connectOptions()
			--> return: string,即返回向当前'连接对象'配置特别的连接选项；
		.setConnectOptions('key=value;key=value;...')
			--> return: None,即向当前'连接对象'配置特别的连接选项(必须在调用.open()之前配置才会生效)；
			--> key=value ,即对于MySQL的特别连接选项可以是:
							CLIENT_COMPRESS
							CLIENT_FOUND_ROWS
							CLIENT_IGNORE_SPACE
							CLIENT_ODBC
							CLIENT_NO_SCHEMA
							CLIENT_INTERACTIVE
							UNIX_SOCKET
							MYSQL_OPT_RECONNECT
							MYSQL_OPT_CONNECT_TIMEOUT
							MYSQL_OPT_READ_TIMEOUT
							MYSQL_OPT_WRITE_TIMEOUT
							SSL_KEY
							SSL_CERT
							SSL_CA
							SSL_CAPATH
							SSL_CIPHER

		.isOpen()
			--> return: bool,即判断当前连接对象是否开启(若开启,则返回True；否则,返回False)；
		.open()
			--> return: bool,即开启(配置好的)当前连接对象(若开启成功,则返回True；否则,返回False)；
		.exec_('query')
			--> return: sqlquery_obj,即执行query操作并返回对应的QSqlQuery对象；
		.close()
			--> return: None,即关闭当前的连接；
		
		.transaction()
			--> return: bool,即开启一次事务(若开启成功,则返回True；否则,返回False)；
		.commit()
			--> return: bool,即提交一次事务(若提交成功,则返回True；否则,返回False)；
		.rollback()
			--> return: bool,即回滚一次事务(若回滚成功,则返回True；否则,返回False)；
		
		.connectionName()
			--> return: string,即返回当前连接的名字；
		.connectionNames()
			--> return: list,即(以列表形式)返回所有连接的名字；
		
		.contains(conn_name)
			--> return: bool,即判断所有连接中是否有conn_name连接；
		
		.database(conn_name)
			--> return: sqldb_obj,即返回连接名字为conn_name的连接对象；
		
		.tables()
			--> return: list,即返回当前连接对象对应的数据库中的所有表名；
	
	QSqlError(sqlerror_obj) / 

		.text()
			--> return: string/'',即返回'数据库'和'驱动'反馈的错误信息集成后的结果；
		.databaseText()
			--> return: string/'',即返回'数据库'反馈的错误信息；
		.driverText()
			--> return: string/'',即返回'驱动'反馈的错误信息；
		
		.isValid()
			--> return: bool,即'当前错误对象'是否存在；
		
		.type()
			--> return: int/-1,即返回'当前错误对象'的类型；
				## from PyQt5.QtSql import QSqlError
				Value	Constant					Description
				-1		None						错误尚未决定
				0		QSqlError.NoError			错误尚未产生
				1		QSqlError.ConnectionError	连接错误
				2		QSqlError.StatementError	SQL语法错误
				3		QSqlError.TransactionError	事务错误
				4		QSqlError.UnknownError		未知错误	

		.swap(sqlerror_obj)
			--> return: sqlerror_obj,即将sqlerror_obj的错误包裹到'当前错误对象'中；
		
	QSqlQuery() /
		--> return: sqlquery_obj,
			Tip:查询对象成功执行SQL语句后，其状态会变成'激活的'；
			Tip:执行新的SQL语句时，这次查询会'落座'于一个'无效的record'；
			Tip:一个'激活的'查询(在取回值之前)必须'落座'于一个'有效的record'；
				  一旦'激活的'查询落座于有效的record,则可以使用.value()方法获取'数据'；
			Tip:操作'record'可以借助.next() / .previous() / .first() / .last() / .seek()等方法；

		.isActive()
			--> return: bool,即返回'当前查询'是否是'激活状态'；
		.isValid()
			--> return: bool,即判断'当前查询'是否落座于一个'有效的record'；
		
		.isSelect()
			--> return: bool,即判断'当前查询'是否是SELECT语句；

		.prepare('sql')
			--> return: bool,即为下次查询准备SQL语句(若成功,则返回True；否则返回False)；
				Tip:sql语句中可以使用':field'或'?'作为占位符；
		.bindValue('palceholder', value)
		.bindValue(index, value)
			--> return: None,即为palceholder(或对应索引处的)占位符绑定对应的value值；
				Tip:index从0开始计算；

		.exec('sql')
			--> return: bool,即执行sql语句(若成功执行,当前查询对象状态变为'激活的'且该方法返回True)；
				Tip:执行查询后，当前查询对象会被落座于一个'无效的record'；如果想重新获取查询结果，必须先将其落座于一个'有效的record'；
		.executedQuery()
			--> return: string,即返回最后一个'成功执行'的查询语句；
		.lastQuery()
			--> return: string/'',即返回'当前查询'的查询语句；
		.result()
			--> return: qresult_obj,即返回'当前查询'的结果对象；
		.numRowsAffected()
			--> return: int/-1,即返回'当前查询'的生效行数(若无法确定,则返回-1)；
				Tip:该方法不适用于SELECT查询('SELECT查询'请使用.size()获取生效行数)；
				Tip:若'当前查询'是'未激活的',也会返回-1；
		
		.value(index)
			--> return: qvariant_obj,即返回'当前record'对应字段(从索引0开始)的值；
		.next()
			--> return: bool,即移动至下一个record
		.previous()
		.first()
		.last()
		.at()
	
	QSqlResult() /
		-->

		.







4. 事件方法
	from PyQt5.QtWidgets import QWidget

		.actionEvent(self, event)

		.childEvent(self, event)

		.closeEvent(self, event)

		.contextMenuEvent(self, event)

		.customEvent(self, event)

		.dragEnterEvent(self, event)

		.dragLeaveEvent(self, event)

		.dropEvent(self, event)

		.enterEvent(self, event)

		.focusInEvent(self, event)

		.focusOutEvent(self, event)

		.hideEvent(self, event)

		.inputMethodEvent(self, event)

		.keyPressEvent(self, event)

		.keyReleaseEvent(self, event)

		.leaveEvent(self, event)

		.mouseDoubleClickEvent(self, event)

		.mouseMoveEvent(self, event)

		.mousePressEvent(self, event)

		.mouseReleaseEvent(self, event)

		.moveEvent(self, event)

		.nativeEvent(self, event)

		.paintEvent(self, event)

		.removeEventFilter(self, event)

		.resizeEvent(self, event)

		.timerEvent(self, event)

		.wheelEvent(self, event)

event对象的属性:
	ActionAdded
	ActionChanged
	ActionRemoved
	ActivationChange
	ApplicationActivate
	ApplicationActivated
	ApplicationDeactivate
	ApplicationDeactivated
	ApplicationFontChange
	ApplicationLayoutDirectionChange
	ApplicationPaletteChange
	ApplicationStateChange
	ApplicationWindowIconChange
	ChildAdded
	ChildPolished
	ChildRemoved
	Clipboard
	Close
	CloseSoftwareInputPanel
	ContentsRectChange
	ContextMenu
	CursorChange
	DeferredDelete
	DragEnter
	DragLeave
	DragMove
	Drop
	DynamicPropertyChange
	EnabledChange
	Enter
	EnterWhatsThisMode
	Expose
	FileOpen
	FocusAboutToChange
	FocusIn
	FocusOut
	FontChange
	Gesture
	GestureOverride
	GrabKeyboard
	GrabMouse
	GraphicsSceneContextMenu
	GraphicsSceneDragEnter
	GraphicsSceneDragLeave
	GraphicsSceneDragMove
	GraphicsSceneDrop
	GraphicsSceneHelp
	GraphicsSceneHoverEnter
	GraphicsSceneHoverLeave
	GraphicsSceneHoverMove
	GraphicsSceneMouseDoubleClick
	GraphicsSceneMouseMove
	GraphicsSceneMousePress
	GraphicsSceneMouseRelease
	GraphicsSceneMove
	GraphicsSceneResize
	GraphicsSceneWheel
	Hide
	HideToParent
	HoverEnter
	HoverLeave
	HoverMove
	IconDrag
	IconTextChange
	InputMethod
	InputMethodQuery
	KeyPress
	KeyRelease
	KeyboardLayoutChange
	LanguageChange
	LayoutDirectionChange
	LayoutRequest
	Leave
	LeaveWhatsThisMode
	LocaleChange
	MacSizeChange
	MaxUser
	MetaCall
	ModifiedChange
	MouseButtonDblClick
	MouseButtonPress
	MouseButtonRelease
	MouseMove
	MouseTrackingChange
	Move
	NonClientAreaMouseButtonDblClick
	NonClientAreaMouseButtonPress
	NonClientAreaMouseButtonRelease
	NonClientAreaMouseMove
	None_
	OkRequest
	OrientationChange
	Paint
	PaletteChange
	ParentAboutToChange
	ParentChange
	PlatformPanel
	PlatformSurface
	Polish
	PolishRequest
	QueryWhatsThis
	ReadOnlyChange
	RequestSoftwareInputPanel
	Resize
	Scroll
	ScrollPrepare
	Shortcut
	ShortcutOverride
	Show
	ShowToParent
	SockAct
	StateMachineSignal
	StateMachineWrapped
	StatusTip
	StyleChange
	TabletEnterProximity
	TabletLeaveProximity
	TabletMove
	TabletPress
	TabletRelease
	TabletTrackingChange
	ThreadChange
	Timer
	ToolBarChange
	ToolTip
	ToolTipChange
	TouchBegin
	TouchCancel
	TouchEnd
	TouchUpdate
	Type
	UngrabKeyboard
	UngrabMouse
	UpdateLater
	UpdateRequest
	User
	WhatsThis
	WhatsThisClicked
	Wheel
	WinEventAct
	WinIdChange
	WindowActivate
	WindowBlocked
	WindowDeactivate
	WindowIconChange
	WindowStateChange
	WindowTitleChange
	WindowUnblocked
	ZOrderChange
	__class__
	__delattr__
	__dict__
	__dir__
	__doc__
	__eq__
	__format__
	__ge__
	__getattribute__
	__gt__
	__hash__
	__init__
	__init_subclass__
	__le__
	__lt__
	__module__
	__ne__
	__new__
	__reduce__
	__reduce_ex__
	__repr__
	__setattr__
	__sizeof__
	__str__
	__subclasshook__
	__weakref__
	accept
	button
	buttons
	flags
	globalPos
	globalX
	globalY
	ignore
	isAccepted
	localPos
	modifiers
	pos
	registerEventType
	screenPos
	setAccepted
	setTimestamp
	source
	spontaneous
	timestamp
	type
	windowPos
	x
	y
