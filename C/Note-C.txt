一、基础知识
    1.注释
        /* 这是注释内容，多行是允许的 */
        // 这是单行注释，C99规定

    2.位、字节和字
        位
            最小的存储单元，可以储存0或1
        字节
            常用的存储单位，绝大多数计算机中1字节=8位，C语言规定1字节=char类型占用的位数
        字(长)
            设计计算机时给定的自然存储单位，1字(长)=8位。随着科技发展计算机从最初的8位->16位->32位->64位

    3.对象和标识符
        对象
            用于储存数据的特定大小的物理内存
        标识符
            用于访问对象的变量的名字，由作用域和链接构成
            > 作用域
                程序中标识符可被访问的区域，分为：
                块作用域
                    1.定义在一对{}中的变量
                    2.定义在函数的形参、for循环、while循环、do-while循环、if语句表达式中的变量
                函数作用域
                函数原型作用域
                文件作用域
                    1.定义在函数之外的变量（即全局变量）
            > 链接
                无链接（即变量被作用域私有化）
                    1.块作用域中的变量
                    2.函数作用域中的变量
                    3.函数原型作用域中的变量
                外部链接
                    1.文件作用域中的变量（可供多个其他文件使用）
                内部链接
                    1.文件作用域中使用static关键字声明的变量（可供当前文件的翻译单元和任何函数使用）
                        源代码（.c扩展名）及其若干（递归性的）头文件（.h扩展名）被编译器视作一个翻译单元
       
    4.存储期
        对象在内存中存在的时间称为“存储期”。C语言中对象共有4种存储期：
            > 静态存储期
                对象在程序执行期间始终存在
            > 线程存储期
                多线程并发程序中，从对象创建到对应线程结束始终存在。
                若变量额外额外声明_Thread_local关键字，则该变量被所有其他线程备份
            > 自动存储期
                程序进入块代码时，为变量分配内存。程序退出块代码时，释放为变量分配的内存
                特别注意的是，块作用域下的变量若额外声明static关键字，则其存储期变为“静态存储期”
                特别注意的是，变长数组的存储期是从对象创建到块的结尾，而不是块的开始到块的结尾
            > 动态分配存储期
                由malloc()和free()等内存管理函数控制的变量

    5.存储类别（Storage Class）
        存储类别        存储期          作用域          链接        声明方式
        自动           自动存储期       块作用域        无链接       块内普通声明
        寄存器         自动存储期       块作用域        无链接       块内register关键字声明
        静态无链接      静态存储期       块作用域        无链接       块内static关键字声明
        静态外部链接     静态存储期      文件作用域       外部链接     任意函数外声明
        静态内部链接     静态存储期      文件作用域       内部链接     任意函数外static关键字声明
        ————————————————————————————————————————————————————————
        [注意]：默认情况下，块或函数头中声明的变量都属于“自动”存储类别。若为了更加清楚地表达这点，可以显式添加auto关键字
        [注意]：“自动”存储类别的变量不会自动初始化
        [注意]：“寄存器”存储类别的变量存储在CPU的寄存器（地址无法被获取）而非内存中。“寄存器”与“自动”的变量绝大多数方面是一致的。
                显式添加register关键字虽能表达意图，但无法保证变量一定存储到寄存器中，因为编译器必须根据寄存器可用空间衡量这一声明：或同意，或直接忽略
        [注意]：“静态...”存储类别的变量中“静态”是指该变量在内存中的位置不变而非值不变。禁止在函数原型中声明static的形参
                关于“静态外部链接”，若当前源代码使用的外部变量定义在其他源代码中，则必须显示添加extern关键字声明该变量

    6.编译机制和编译器基础
        > 编译过程
            源代码（.c后缀）
                |
                |--<--编译器
               \|/
            目标代码（.obj后缀）
                |              |--<--库代码
                |--<--链接器----|
               \|/             |--<--启动代码
            可执行代码（.exe后缀）

        > 编译器在预处理之前，会对程序进行一些翻译工作：
            1.将源代码中的字符映射到源字符集（处理多字节字符和三字符序列）
            2.定位<反斜杠紧跟换行符>的地方并删除（将物理行转化为逻辑行）
            3.将文本划分成“预处理记号序列”、“空白序列”和“注释序列”（用1个空格替换每个注释和空白字符序列）

    7.输入与输出
        C语言规定，输入都是缓冲的（而非无缓冲输入）
        > 缓冲区
            临时存储区，用于存储用户一段时间内的输入信息
        > 缓冲方式
            完全缓冲I/O，当缓冲区完全填满时才刷新缓冲区的方式
            行缓冲I/O，当用户输入“换行符”时才刷新缓冲区的方式
        > 输入处理
            C语言
        
二、数据类型和结构
    1.类型转换
        在数据计算时，C语言会自动将低级别的类型转换为高级别的，最后如果需要将结果赋值再进行降级
        高级别 -----------------------------------------------------------------------------------------> 低级别
        long double > double > float > unsigned long long > long long > unsigned long > long > unsigned int > int
        ————————————————————————————————————————————————————————
        [注意]：short类型和char类型会自动升级为int类型
        [注意]：作为“参数”被传递时，float类型会自动升级为double类型

    2.整数及声明
        short int varName;                          // 有符号整数声明，取值范围可能比int小
        unsigned short int varName;                 // 无符号整数声明，取值范围可能比int小
        int varName;                                // 有符号整数声明，int至少占16位，取值范围一般为-2^15 ~ 2^15-1
        unsigned int varName;                       // 无符号整数声明
        long int varName;                           // 有符号整数声明，取值范围可能比int略大
        unsigned long int varName;                  // 无符号整数声明，取值范围可能比int略大
        long long int varName;                      // 有符号整数声明，long long int至少占64位
        unsigned long long int varName;             // 无符号整数声明
        ————————————————————————————————————————————————————————
        [注意]：short可能比int小，long可能比int大，因为C语言仅规定short占用的存储空间不大于int，long占用的不少于int
        [注意]：通常来说，short占16位，int占16位/32位，long占32位，long long占64位

    3.浮点数及声明
        float varName;                              // 32位浮点数声明，至少精确到小数点后6位（使用24位表示有效数及其符号，8位表示指数及其符号）
        double varName;                             // 64位浮点数声明，至少精确到小数点后13位
        long double varName;                        // 高精浮点数声明，C语言仅规定long double的精确度不低于double
        ————————————————————————————————————————————————————————
        [注意]：编译器默认使用double类型的浮点数。若显式指定浮点类型可以为值添加后缀，例如：54.3L 表示long double类型，2.3F 表示float类型
        [注意]：e计数法，即科学计数法，例如：-1.5e+12 等价于 -1.5*10^12

    4.字符及声明
        char varName;                               // 字符声明（占1字节的存储空间，底层实现为整型）
                                                       例如：char a = 'A'-字符A，char beep = 7-蜂鸣字符，char page = '\n'-换行字符
        signed char varName;                        // 有符号字符声明（通常用于表示小整数）
        unsigned char varName;                      // 无符号字符声明（通常用于表示小整数）
        ————————————————————————————————————————————————————————
        [注意]：常见转义字符
            \a  ->  警报字符
            \b  ->  退格字符
            \f  ->  换页字符
            \n  ->  换行字符
            \r  ->  回车字符
            \t  ->  水平制表符
            \v  ->  垂直制表符
            \\  ->  反斜杠字符
            \'  ->  单引号字符
            \"  ->  双引号字符
            \?  ->  问号字符
            \0  ->  八进制前缀
            \x  ->  十六进制前缀

    5.数组类型及声明
        anyType arrName[dimen][...];                // 声明一个（多维）数组
        ————————————————————————————————————————————————————————
        [注意]：数组名arrName是该数组首个元素的地址（即arrName = &arrName[0]），因此arrName也被视作一个指针
        [注意]：C语言无法保存运行时的变量状态，因此将数组传入函数，函数会将其视作一个指针
        [注意]：C语言中字符串等价于“字符数组”。特别注意的是，字符串必须以'\0'空字符结尾，因此字符数组声明的dimen比实际包含的字符数少1
            char strName[10];                       // 声明一个包含9个字符的字符串strName
        [注意]：C语言中对数组赋值具有一些规定：
            int arrA[10] = {1, 2, 3, 4};            // 声明一个int类型的arrA数组并为其初始化
            int arrB[10];                           // 声明一个int类型的arrB数组
            arrB = arrA;                            // 禁止将数组作为整体赋值给其他变量
            arrB[10] = {11, 22, 33, 44};            // 禁止在初始化之外使用{}为数组赋值
        [注意]：计算数组中“有效元素”的个数可以使用：sizeof(arrName) / sizeof(anyType)
        [注意]：anyType为数组中元素的统一类型
        [注意]：dimen为数组中元素的个数，可以声明多个[dimen]用于表示多维数组。dimen必须是“整型常量”、“枚举常量”、“明示常量”或“sizeof表达式”之一
        [注意]：anyType arrName[dimen] = {ele1, ele2, ...};         // 数组可以在声明的同时初始化
        [注意]：anyType arrName[dimen] = {ele1, [sub]=ele, ...}     // C99新增“指定初始化器”功能，用于个性化赋值
        [注意]：数组在初始化时若未向对应下标赋值，系统将赋予垃圾值（不一定为0）
        [注意]：数组的维度必须是常量，直到C99规定了变长数组（VLA，variable-length array）后，允许使用变量表示数组维度
        [注意]：复合字面量数组常用作“实参”传入函数，形如：(anyType [dimen][...]){ele1, ele2, ...}
            int arrA[2] = {1, 2};                   // 普通数组的声明及初始化，变量arrA可以留待后续使用
            (int [2]){1, 2}                         // 创建复合字面量数组，类似于表达式
        [注意]：数组元素使用[sub]下标访问，例如：
            arrA[0]                                 // 数组第1个元素的变量名
            arrA[3]                                 // 数组第4个元素的变量名

    6.指针类型及声明
        anyType * ptrName;                          // 声明一个指向anyType类型变量的指针
        ————————————————————————————————————————————————————————
        [注意]：ptrName为一个指针，其值是所指变量的地址
            char * ptrName1, * ptrName2;            // 声明两个指向char类型变量的指针ptrName1和ptrName2
        [注意]：使用地址运算符（&）和解引用运算符（*）可以搭建变量的地址和变量的值之间的联系，例如：
            int varName = 3;                        // 声明一个int类型的变量varName并初始化为3
            int * ptrName;                          // 声明一个指向anyType类型变量的指针ptrName
            ptrName = &varName                      // 将变量varName的地址赋值给指针ptrName
            *ptrName                                // 将指针ptrName解引用，其返回值就是varName的值
        [注意]：“指针变量加1”是加1个存储单元，至于1个存储单元是多少字节取决于该指针指向的变量类型

    7.结构类型及声明
        struct srtName varName;                     // 声明一个srtName类型的结构变量varName
        ————————————————————————————————————————————————————————
        [注意]：结构必须先定义再使用（结构名srtName是可选的，若要重复使用则必须声明它）
            struct [srtName] {                      // 定义结构使用关键字struct
                anyType mbr1;                       // 结构的成员声明
                ...
            };                                      // 不要忘记';'
        [注意]：与其他变量一样，结构可以在声明的同时初始化
            struct srtName varName = {
                mbr1Value;                          // 全成员初始化（按照成员定义的顺序）
                mbr2Value;
                ... 
            };                                      // 不要忘记';'

            struct srtName varName = {
                .mbr1 = mbr1Value;                  // 借助指定初始化器对成员选择性初始化
                .mbr2 = mbr2Value;
                ...
            };                                      // 不要忘记';'
        [注意]：结构变量可以使用成员运算符（.）访问其成员，结构指针可以使用间接成员运算符（->）访问其成员
            struct example varName;
            struct example *ptrName = &varName;     // *ptrName == varName
            varName.mbr1 [= newValue];              // 通过结构varName得到[或修改]成员mbr1的值
            ptrName->mbr1 [= newValue];             // 通过结构指针ptrName得到[或修改]成员mbr1的值
        [注意]：允许将结构赋值给“同类型的”其他结构（但数组不行）
            struct structA varName1 = {
                "John",
                20
            };
            struct structA varName2 = varName1;
        [注意]：复合字面量结构常用作“实参”传入函数，形如：
            (sturct srtName){                       // 创建复合字面量结构
                mbr1Value;
                mbr2Value;
                ...
            }                                       // 创建复合字面量无需声明';'
        [注意]：嵌套结构中允许使用“匿名结构”
            struct person {                         // 普通结构的定义
                char name[30];
                int age;
            };
            struct house {                   
                long int id;
                struct person owner;                // 普通嵌套结构的定义
            };
            struct house houseA = {                 // 普通嵌套结构的初始化
                39202940502,
                {"John", 20}
            };
            houseA.owner.name                       // 访问嵌套结的name成员
            

            struct house {
                long int id;
                struct {                            // 匿名结构的定义
                    char name[30];
                    int age;
                }
            }
            struct house houseA = {                 // 与普通嵌套结构的初始化一样
                39202940502,
                {"John", 20}
            };
            houseA.name                             // 与普通嵌套结构的成员访问不同

    8.联合类型及其声明
        union uinName varName;                      // 声明一个uinName类型的联合变量varName
        ————————————————————————————————————————————————————————
        [注意]：联合能在同一块内存空间中存储不同的数据类型但并非同时存储（空间固定，选择更多）
        [注意]：联合必须先定义再使用
            union uinName {                         // 定义联合使用关键字union
                anyType mbr1;                       // 一个联合只能存储一种类型的成员，但选择有很多
                anyType mbr2;
                ...
            };
        [注意]：联合的初始化
            union uinName varName = otherUinName    // 利用其他联合进行初始化
            union uinName varName = {mbr1Value}     // 默认初始化第一种成员类型
            union uinName varName = {.mbr2=value}   // 借助指定初始化器对成员选择性初始化
        [注意]：联合变量可以使用成员运算符（.）访问联合的值，联合指针可以使用间接成员运算符（->）访问联合的值
            union uinName *ptrName = &varName;
            varName.mbr1 [= newValue];              // 通过联合变量varName得到[或修改]联合的值
            ptrName->mbr1 [= newValue];             // 通过联合指针ptrName得到[或修改]联合的值

    9.枚举类型
        enum eumName varName;                       // 声明一个eumName类型的枚举变量varName
        ————————————————————————————————————————————————————————
        [注意]：枚举中的枚举符底层实现是int常量（默认从0开始）
        [注意]：枚举必须先定义再使用
            enum eumName {                          // 定义枚举使用关键字enum
                mbr1,                               // 定义枚举符1，等价于0
                mbr2,                               // 定义枚举符2，等价于1
                ...
                mbrN = intValue,                    // 允许为枚举符设置对应的int常量
                ...                                 // 后续依次递增1，等价于intValue+1
            };

    0.特殊类型
        size_t                                      // 定义在stdio.h头文件中，sizeof表达式的返回值类型
                                                       底层实现为unsigned long int
        FILE                                        // 定义在stdio.h头文件中，表示文件流类型（包含缓冲区信息）
        va_list                                     // 定义在stdarg.h头文件中，表示可变参数类型

三、运算符与表达式
    1.表达式及其真假性、序列点
        ^ C语言中运算符和运算对象共同构成表达式，表达式与表达式又可以构成更复杂的表达式
        ^ C语言中任何表达式都会返回一个值，该值“非0为真，是0为假”
        ^ C语言中表达式或语句的副作用会在下个序列点之前全部清算
        ^ 与（&&）、或（||）、逗号（,）、分号（;）和完整表达式（独立表达式）是重要的序列点

    2.赋值运算符
        =
            ^ 赋值运算符
            ^ 运算顺序：右 -> 左
            ^ 允许多重赋值，例如：
                int a, b, c;                // 声明三个int类型的变量a、b和c
                a = b = c = 10              // 等价于a=10; b=10; c=10;
        +=  -=  *=  /=
            ^ 累计赋值运算符
            ^ 例如：
                int a = 3;                  // 声明一个int类型的变量a
                a += 3;                     // 等价于a = a + 3
    
    2.算术运算符
        +
            ^ 加法运算符
            ^ 运算顺序：左 -> 右
            ^ 运算符两侧可以是变量，也可以是字面量
        -
            ^ 减法运算符/符号运算符
            ^ 减法运算符运算顺序：左 -> 右
            ^ 符号运算符运算顺序：右 -> 左
        *
            ^ 乘法运算符
            ^ 运算顺序：左 -> 右
        / 
            ^ 除法运算符
            ^ 运算顺序：左 -> 右
            ^ 运算结果的类型
                int/int       -> 趋零截断（而非四舍五入）
                double/double -> 浮点数
                double/int    -> 浮点数（int自动转化为double后进行计算）
                int/double    -> 浮点数（int自动转化为double后进行计算）
        %
            ^ 求模运算符（仅用于整数），a % b 等价于 a - (a/b)*b
            ^ 运算结果的正负取决于“被除数”的正负
                11 % 5 ······ 1
                11 % -5 ····· 1
                -11 % 5 ····· -1
                -11 % -5 ···· -1
    
    3.关系运算符
        == 
            相等运算符
        !=
            不相等运算符
        >
            大于运算符
        >=
            大于或等于运算符
        <
            小于运算符
        <=
            小于或等于运算符
        ————————————————————————————————————————————————————————
        [注意]：运算顺序：左 -> 右
        [注意]：关系运算符的级别
            高级别  < <= > >=
            低级别  == !=

    4.逻辑运算符
        &&
            ^ 与运算符
            ^ 运算顺序：左 -> 右
            ^ 与运算符优先级比或运算符高，比关系运算符低，但比赋值运算符的优先级高
        ||  
            ^ 或运算符
            ^ 运算顺序：左 -> 右
            ^ 或运算符优先级比关系运算符低，但比赋值运算符的优先级高
        !
            ^ 非运算符
            ^ 非运算符优先级仅次于()，与递增/递减运算符相同

    5.特殊运算符
        sizeof()
            ^ 字节运算符，形如：sizeof(anyType/varName)
            ^ 示例：sizeof(double)，整个表达式返回size_t类型的值
        ()
            ^ 强制类型转换符，形如：(anyType)
            ^ 示例：(int)1.5，整个表达式结果为1
        &
            ^ 地址运算符，形如：&varName
            ^ 若varName为变量，则&varName表示指针（即该变量的地址）
              若varName为地址，则varName本身就是指针
        *  
            ^ 解引用运算符，形如：*ptrName
            ^ ptrName表示指针，*ptrName表示指针ptrName指向的变量的值
            ^ 解引用运算符运算顺序仅次于()，与递增/递减运算符相同
        ++
            ^ 递增运算符，形如：++varName / varName++
            ^ 递增运算符优先级仅次于()，与非运算符相同
            ^ ++a   ->  先增后取值
              a++   ->  后增先取值
        --
            ^ 递减运算符，形如：--varName / varName--
            ^ 递减运算符优先级仅次于()，与非运算符相同
            ^ --a   ->  先减后取值
            ^ a--   ->  后减先取值
        ,
            ^ 逗号运算符，常用于for循环中
            ^ 逗号运算符是序列点之一
            ^ 整个逗号表达式的值为“逗号右侧项”的值
              示例：x = (y=3,(z=++y + 2) + 5)
              过程：1.先将3赋值给y
                   2.计算++y得4
                   3.将4+2赋值给z
                   4.逗号运算符右侧项为z+5得11
                   5.整个表达式的值为逗号右侧项的值（即将11赋值给x）
        ?
            ^ 条件运算符，形如：boolExpression ? trueExpression : falseExpression
            ^ 若boolExpression为真，整个表达式的值为trueExpression的值，否则为falseExpression的值
        .
            ^ 成员运算符
            ^ 常用于访问“结构”、“联合”的成员
        -> 
            ^ 间接成员运算符
            ^ 常搭配指针用于访问“结构”、“联合”的成员

    6.运算符优先级顺序
        高优先级 ------------------------------------------------------------------------------> 低优先级
        ()  >>  []  >>  ++ --     *    !  >>  * / % + -  >>  < > = !=  >>  &&  >>  ||  >>  = += -= *= /=
        圆括号   数组   递增/递减  解引用  非      算术运算符      关系运算符      逻辑运算符          赋值运算符

四、常用语句
    0.泛型选择表达式
        _Generic(expression, anyType1:value1, anyType2:value2, ...)
        ————————————————————————————————————————————————————————
        [注意]：_Generic是C11规定的关键字
        [注意]：泛型选择表达式的值会根据expression值的类型进行匹配
               若expression值的类型是anyType1，则整个泛型选择表达式的值为value1
               若expression值的类型是anyType2，则整个泛型选择表达式的值为value2
               ...
        [注意]：泛型选择表达式常用于#define语句中

    1.预处理语句
        #include <filepath.suffix> 
        #include "filepath.suffix"
        ————————————————————————————————————————————————————————
        [注意]：预处理语句以'#'开始，到第一个换行符（'\n'）为止，没有结尾的';'
        [注意]：#include语句会将后面的文件内容输入到当前#include指令的位置，并替换#include语句
        [注意]：<>提示预处理器到“系统目录”中查找该文件
               ""提示预处理器先到“指定目标”查找该文件，若未找到再到“系统目标”查找
        [注意]：#include语句常用于导入头文件（.h后缀名），头文件中一般包括以下信息：
               明示常量
               宏函数
               函数原型声明
               结构模板定义
               类型定义
               共享变量

        #define MACRO macroValue
        ————————————————————————————————————————————————————————
        [注意]：预处理语句以'#'开始，到第一个换行符（'\n'）为止，没有结尾的';'
        [注意]：#define语句定义的宏会在编译时被统一替换成对应的替换体
        [注意]：MACRO遵循变量命名规则，通常全大写且禁止出现空格，被称为“明示常量”或“符号常量”，也称为“宏”（分为类对象宏和类函数宏）
               MACRO中可以使用参数（类函数宏），形如：
               # define MEAN(X,Y) (((X)+(Y))/2)
               int var = MEAN(2,3);                 // 程序中使用该明示常量（像函数调用，但完全不同）
               
               程序的字符串中可以使用预处理运算符（#）将记号转换为字符串
               printf("MEAN(X,Y) is %d.\n", var)    // 结果为MEAN(X,Y) is 2
               printf("MEAN(#X,#Y) is %d.\n", var)  // 结果为MEAN(2,3) is 2
               
               #define语句中可以使用运算符（##）将不同记号无缝衔接
               # define XNAME(N) x##N
               int XNAME(1) = 4;                    // 等价于int x1 = 4；

               #define语句中可以使用...和__VA_ARGS__进行多参数的宏替换
               # define PR(X,...) prinft("MSG"#X":"__VA_ARGS__)
               PR(1, "x=%d\n", x)                   // 等价于prinft("MSG""1"":""x=%d\n", x)
        [注意]：#define语句只做“宏->替换体”的字符序列替换工作，不涉及任何值的计算
               # define SQUARE(X) X*X
               int a = SQUARE(2);                   // a = 4
               int b = SQUARE(a+1);                 // b = a+1*a+1 = 9
        [注意]：macroValue被称为“替换体”。它可以是具体值，也可以是各种表达式或语句，甚至为空（但豪无意义）
               替换体属于“记号型”字符串（而非“字符型”字符串）
               # define SIX 2*3                     // 有1个记号（2*3）
               # define SIX 2 * 3                   // 有3个记号（2、*、3）
               当作记号型字符串，空格等字符被作为记号间的分隔符
               当作字符型字符串，空格等字符被视作替换体的一部分
        
        #undef MACRO
        ————————————————————————————————————————————————————————
        [注意]：#undef语句可以取消已定义（或未定义）的#define语句
        [注意]：部分C语言预定义的宏无法通过#undef语句取消

        #ifdef  #else   #endif
        #ifndef #else   #endif
        #if     #elif   #else   #endif
        ————————————————————————————————————————————————————————
        [注意]：三者属于“条件编译”语句
        [注意]：为兼容旧版编译器，三者在书写时必须左对齐#（嵌套除外）
            #ifdef  MACRO                           // 如果已定义MACRO，执行后续
            #include "file.h"                       
            #define FLAG A
            #else                                   // 如果未定义MACRO，执行后续
            #include "other.h"
            #define FLAG B
            #endif                                  // 条件编译声明结束
        [注意]：#ifndef与#ifdef恰好相反，常用于避免多次包含的情况
            #ifndef  MACRO                          // 如果未定义MACRO，执行后续
            ...
        [注意]：#if与#ifdef略有不同，它根据“整型常量表达式”的真假性工作
            #if SYS==1                              // 如果SYS==1为真，执行后续
            #include "file.h"
            #elif SYS==2
            #include "other.h"
            #else
            #include "what.h"
            #endif

    2.类型定义语句
        typedef ANYTYPE aliasType;
        ————————————————————————————————————————————————————————
        [注意]：ANYTYPE通常全大写

    3.声明及初始化语句
        [keyword] anyType varName;                          // 单个普通变量声明
        [keyword] anyType varName1, varName2, ...;          // 多个普通变量声明
        [keyword] anyType * ptrName1, * ptrName2, ...;      // 多个指针变量声明
        [keyword] anyType varName = initValue;              // 声明后直接初始化
      X [keyword] anyType varName1, varName2 = initValue;   // 糟糕的声明，不推荐
        ————————————————————————————————————————————————————————
        [keyword]：C语言中允许为变量额外声明一些关键字，常见的有：
            1.const
                声明为const的变量为只读变量，意味着禁止修改该变量的值
                特别注意的是“指针变量”，例如：const int * const ptr;
                    第1个const表示禁止修改指针ptr指向的变量的值
                    第2个const表示禁止修改指针指向其他的地址
            2.static
                声明为static的变量属于内部链接的文件作用域
        [anyType]：指针指向的变量的类型
        [ptrName]：指针变量的名字（指针变量的值+1增加的是1个存储单元，至于1个存储单元是多少字节取决于anyType）
        [注意]：禁止将值不变的数据（即声明为const但不包括const位于开头的指针）赋值给普通的指针变量
            const int arrayA[5] = {11, 22, 33, 44, 55};
            int * ptr;
            ptr = arrayA;       // 无效的赋值

    4.空语句
        ;

    5.循环语句
        > while循环
            while(boolExpression) {
                loop body;
            }
        
        > do-while循环
            do {
                loop body;
            } while (boolExpression);           // 不要忘了';'

        > for循环
            for(initState; boolExpression; updateState) {
                loop body;
            }

    6.continue和break语句
        continue;                               // 跳过当前循环进入下一次循环
        break;                                  // 终止当前循环

    7.控制语句
        > if语句
            if (boolExpression) {
                control body;
            } else if (boolExpression) {
                control body;
            } ... {
              ...
            } else {
                control body;
            }

        > switch语句
            switch (intOrCharExpression) {
                case intOrCharConst1:
                    [case1 body;]
                    [break;]
                case intOrCharConst2:
                    [case2 body;]
                    [break;]
                ...
                [default:
                    [default body;]
                ]
            }
            ————————————————————————————————————————————————————————
            [注意]：若没有声明break，switch语句会执行对应case中的声明，然后执行default（如果有的话），最后退出switch语句
    
五、函数
    1.函数原型
        rvType funcName([parmType parm, ...]);
        ————————————————————————————————————————————————————————
        [注意]：鼓励在代码开头提前声明函数原型
        [rvType]：函数的返回值类型
        [parmType]：函数的参数类型
        [parm]：函数的参数名

    2.函数定义
        rvType funcName([parmType parm, ...]) {
            function body;
            ...;
            [return rv;]
        }
        ————————————————————————————————————————————————————————
        [注意]：函数名funcName本身是一个指针
        [注意]：函数定义时设置的参数称为“形参”（Formal Parameter）
        [parmType parm]：若函数无需参数，将其声明为void
    
    3.函数调用
        funcName([argv, ...])
        ————————————————————————————————————————————————————————
        [注意]：函数调用时传入的参数称为“实参”（Actual Argument）
    
六、C标准库
    #include <stdarg.h>
        va_list
            -> 该头文件定义的宏，用于表示可变参数类型
        
        void va_start(va_list ap, last_arg)
        anyType va_arg(va_list ap, anyType)
        void va_copy(va_list dest, va_list src)
        void va_end(va_list ap)
        ————————————————————————————————————————————————————————
        [注意]：上述多个函数互相配合，用于实现具有可变参数的函数定义
        [注意]：声明了#include <stdarg.h>后可以在函数原型定义和函数定义中使用'...'表示可变参数
            #include <stdarg.h>
            int sum(int first, ...);                // 函数原型定义，'...'必须是最后一个形参，且前面至少定义一个形参
            ...
            int sum(int first, ...) {               // 函数定义，'...'必须是最后一个形参，且前面至少定义一个形参
                va_list ap;                         // Step1:声明一个va_list类型的可变参数列表ap
                va_start(ap, first);                // Step2:借助va_start函数初始化整个参数列表（包含可变参数ap和第一个形参first）
                varName = var_arg(ap, anyType)      // Step3:从可变参数列表ap中依次取出参数进行类型检验
                ...                                          每调用一次var_arg函数就从可变参数列表中取出一个参数
                logical statement;                  // 取出所有可变参数后，进行函数原本的逻辑操作
                ...
                va_list apCopy;                     // 若想重复使用可变参数列表ap，可以定义va_list类型的副本
                va_copy(apCopy, ap);                   借助va_copy函数进行值的拷贝  
                ...
                va_end(ap);                         // Step4:最后不要忘记清理“现场”
            }

    #include <stdio.h>
        NULL
            -> 该头文件定义的宏，用于表示空指针常量
        
        EOF
            -> 该头文件定义的宏，用于表示文件结束的符号常量
        
        BUFSIZ
            -> 该头文件定义的宏，用于表示文件缓冲区大小的单位常量

        void setbuf(FILE * stream, char * buffer);
        ————————————————————————————————————————————————————————
        [注意]：setbuf函数会设置文件流的缓冲区大小
        [注意]：buffer为特定大小的字符数组，其容量为BUFSIZ的倍数且至少为BUFSIZ
        
        void perror(const char * errInfos)
        ————————————————————————————————————————————————————————
        [注意]：perror函数会将errInfos信息输出到stderr。完整的stdrr内容由两部分组成，形如："errInfos: " + "系统错误提示"
        [注意]：errInfos为错误的描述性字符数组

        FILE * fopen(const char * filename, const char * mode);
        ————————————————————————————————————————————————————————
        [注意]：fopen函数返回一个文件流类型的指针
        [注意]：filename为字符数组类型的文件名
        [注意]：mode为字符数组类型的打开模式：
                "r"     -> 只读（文件必须存在）
                "w"     -> 只写（若文件存在，内容清零；若文件不存在，创建新文件）
                "a"     -> 追加（若文件存在，尾部附加，EOF符号保留；若文件不存在，创建新文件）
                "r+"    -> 读/写（文件必须存在）
                "w+"    -> 写/读（若文件存在，内容清零；若文件不存在，创建新文件）
                "a+"    -> 追加/读（若文件存在，尾部附加，EOF符号不保留；若文件不存在，创建新文件）

        int fclose(FILE * stream);
        ————————————————————————————————————————————————————————
        [注意]：fclose函数会关闭文件流，并刷新所有的缓冲区
        [注意]：stream为文件流类型的指针

        int fflush(FILE * stream);
        ————————————————————————————————————————————————————————
        [注意]：fflush函数会手动刷新输出缓冲区
        [注意]：stream为文件流类型的指针

        long int ftell(FILE * stream);
        ————————————————————————————————————————————————————————
        [注意]：ftell函数会返回文件流的当前位置
        [注意]：stream为文件流类型的指针

        int fseek(FILE * steram, long int offset, int whence);
        ————————————————————————————————————————————————————————
        [注意]：fseek函数会根据whence和offset重新设置文件流的当前位置
        [注意]：stream为文件流类型的指针
        [注意]：offset的参照系为whence
        [注意]：whence为offset偏移量的起点

        int printf("...placeholder...", varName1, varName2, ...);
        ————————————————————————————————————————————————————————
        [注意]：printf函数会返回所输出字符的总个数（包括空格和不可见字符）。返回负值表示输出错误
        [注意]：varName个数必须与placeholder个数一致，否则会出现未知的错误
        [注意]：若输出字符过长，在书写时可以使用'\'进行断行
        [placeholder]：占位符形如：%[flag][width/*][.precision][state]
            %
                占位符标识（必须有）
            ————————————————————————————————
            flag
                结果格式，常见的有：
                -   ->  左对齐
                +   ->  显示正负号
                    ->  正数显示前导空格，负数显示符号
                0   ->  零充结果
                #   ->  显示进制前缀
            ————————————————————————————————
            width/*
                结果宽度/待定宽度
            ————————————————————————————————
            .precision
                结果精度
            ————————————————————————————————
            state
                结果类型，常见的有：
                \zd ->  字节数和字符个数
                \p  ->  指针（即变量的地址）

                \hd ->  short int整型
                \hu ->  unsigned short int整型

                \d  ->  int整型
                \u  ->  unsigned int整型
                \o  ->  八进制int整型
                \x  ->  十六进制int整型

                \ld ->  long int整型
                \lu ->  unsigned long int整型
                \lo ->  八进制long int整型
                \lx ->  十六进行long int整型

                \lld->  long long int整型
                \llu->  unsigned long long int整型

                \c  ->  字符型
                \s  ->  字符串型

                \f  ->  float型和double型
                \Lf ->  long double型
                \e  ->  e计数法格式的float型和double型
                \Le ->  e计数法格式的long double型

        int scanf("...placeholder...", &varName1, ...);
        ————————————————————————————————————————————————————————
        [注意]：scanf函数会读取输入并依次赋值给varName变量的指针，返回成功赋值的变量个数
        [注意]：scanf函数读取用户输入时，遭遇“空白字符”（空格、制表符或换行符）后就终止读取
        [placeholder]：同printf函数中的placeholder，除了：
            *
                跳过当前输入项
        [&varName]：若varName变量本身就是指针，则无需声明'&'，例如：字符数组 scanf("%s", charArray)
        
        int getchar(void);
        ————————————————————————————————————————————————————————
        [注意]：getchar函数会从stdin读取一个字符并返回它
        [注意]：该字符为unsigned int类型
    
        int putchar(int parm);
        ————————————————————————————————————————————————————————
        [注意]：putchar函数会将parm字符输出到stdout
        [注意]：parm字符为unsigned int类型

    #include <stdlib.h>
        RAND_MAX
            -> 该头文件定义的宏，用于表示rand函数返回的最大值

        EXIT_FAILURE
            -> 该头文件定义的宏，用于表示exit函数失败时要返回的值
        
        EXIT_SUCCESS
            -> 该头文件定义的宏，用于表示exit函数成功时要返回的值

        void exit(int status)
        ————————————————————————————————————————————————————————
        [注意]：exit函数会终止当前进程，并将status状态值返回给父进程
        [注意]：status通常用<stdlib.h>头文件中的符号常量EXIT_FAILURE或EXIT_SUCCESS表示

        int atexit(void (*func)(void))
        ————————————————————————————————————————————————————————
        [注意]：atexit函数会在程序终止时调用一个无参数、无返回值的func函数
        [注意]：atexit函数会返回func函数的注册状态（若注册成功，返回0；若注册失败，返回非0值）

        int abs(int x)
        ————————————————————————————————————————————————————————
        [注意]：abs函数会返回int型整数x的绝对值

        long int labs(long int x)
        ————————————————————————————————————————————————————————
        [注意]：labs函数会返回long int型整数x的绝对值

        int rand(void)
        ————————————————————————————————————————————————————————
        [注意]：rand函数会返回一个0~RAND_MAX之间的“伪随机数”

        void * malloc(size_t size)
        ————————————————————————————————————————————————————————
        [注意]：malloc函数返回一个待定类型的指针。若内存分配失败，则返回NULL常量
        [注意]：size为动态分配的总内存大小（按照sizeof表达式的结果计量）

        void * calloc(size_t nitems, size_t size)
        ————————————————————————————————————————————————————————
        [注意]：calloc函数返回一个待定类型的指针。若内存分配失败，则返回NULL常量
        [注意]：calloc函数会分配nitems个大小为size的内存
        [注意]：size为动态分配的内存大小（按照sizeof表达式的结果计量）

        void * realloc(void * ptr, size_t size)
        ————————————————————————————————————————————————————————
        [注意]：realloc函数会尝试修改之前分配给ptr指针的内存空间
        [注意]：realloc函数返回一个待定类型的指针。若内存分配失败，则返回NULL常量
        [注意]：size为动态分配的总内存大小（按照sizeof表达式的结果计量）

        void free(void * ptr)
        ————————————————————————————————————————————————————————
        [注意]：free函数会释放待定类型指针对应的内存空间
        [注意]：ptr必须是调用malloc、calloc、realloc函数后返回的指针

    #include <string.h>
        size_t strlen(const char * ptr);
        ————————————————————————————————————————————————————————
        [注意]：strlen函数会统计并返回字符数组ptr中的“字符个数”（不包括空字符，但包括空格和标点符号）

    #include <ctype.h>
        int isalnum(int parm)
            -> 判断parm是否是“字母或数字”
        
        int isalpha(int parm)
            -> 判断parm是否是“字母”
        
        int isdigit(int parm)
            -> 判断parm是否是“十进制数字”
        
        int isxdigit(int parm)
            -> 判断parm是否是“十六进制数字”
        
        int isblank(int parm)
            -> 判断parm是否是“标准空白字符”（空格、水平制表符、换行符）
        
        int isspace(int parm)
            -> 判断parm是否是“空白字符”（空格、水平制表符、换行符、换页符、回车符、垂直制表符）
        
        int isprint(int parm)
            -> 判断parm是否是“可打印字符”
        
        int isupper(int parm)
            -> 判断parm是否是“大写字母”

        int islower(int parm)
            -> 判断parm是否是“小写字母”
        
        int tolower(int parm)
            -> 将parm转换成小写字母后返回它，或者直接返回它
        
        int toupper(int parm)
            -> 将parm转换成大写字母后返回它，或者直接返回它
    
    #include <math.h>
        double ceil(double x)
            -> 返回>=x的最小整数
        
        double floor(double x)
            -> 返回<=x的最大整数

        double pow(double x, double y)
            -> 返回x的y次幂
        
        double sqrt(double x)
            -> 返回x的平方根
        
        double fabs(double x)
            -> 返回浮点数x的绝对值
        
        double fmod(double x, double y)
            -> 返回x除以y的余数
    
